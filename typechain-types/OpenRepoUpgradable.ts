/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OpenRepoUpgradableInterface extends utils.Interface {
  contractName: "OpenRepoUpgradable";
  functions: {
    "addressAdd(string,address)": FunctionFragment;
    "addressGet(string)": FunctionFragment;
    "addressGetAll(string)": FunctionFragment;
    "addressGetAllOf(address,string)": FunctionFragment;
    "addressGetIndex(string,uint256)": FunctionFragment;
    "addressGetIndexOf(address,string,uint256)": FunctionFragment;
    "addressGetOf(address,string)": FunctionFragment;
    "addressHas(string,address)": FunctionFragment;
    "addressHasOf(address,string,address)": FunctionFragment;
    "addressRemove(string,address)": FunctionFragment;
    "addressSet(string,address)": FunctionFragment;
    "boolAdd(string,bool)": FunctionFragment;
    "boolGet(string)": FunctionFragment;
    "boolGetAll(string)": FunctionFragment;
    "boolGetIndex(string,uint256)": FunctionFragment;
    "boolGetIndexOf(address,string,uint256)": FunctionFragment;
    "boolGetOf(address,string)": FunctionFragment;
    "boolRemove(string,bool)": FunctionFragment;
    "boolSet(string,bool)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "initialize()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stringAdd(string,string)": FunctionFragment;
    "stringGet(string)": FunctionFragment;
    "stringGetAll(string)": FunctionFragment;
    "stringGetIndex(string,uint256)": FunctionFragment;
    "stringGetIndexOf(address,string,uint256)": FunctionFragment;
    "stringGetOf(address,string)": FunctionFragment;
    "stringRemove(string,string)": FunctionFragment;
    "stringSet(string,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressAdd",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "addressGet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addressGetAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetAllOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetIndexOf",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressHas",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressHasOf",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressRemove",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressSet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "boolAdd",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "boolGet", values: [string]): string;
  encodeFunctionData(functionFragment: "boolGetAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "boolGetIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetIndexOf",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "boolRemove",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "boolSet",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stringAdd",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "stringGet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stringGetAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetIndexOf",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringRemove",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringSet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addressAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addressGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressGetAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetAllOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressHasOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolGetAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boolGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boolGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boolGetOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolRemove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stringAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stringGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringGetAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stringSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AddressAdd(address,string,address)": EventFragment;
    "AddressRemoved(address,string,address)": EventFragment;
    "AddressSet(address,string,address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BoolAdd(address,string,bool)": EventFragment;
    "BoolRemoved(address,string,bool)": EventFragment;
    "BoolSet(address,string,bool)": EventFragment;
    "ContractURI(string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StringAdd(address,string,string)": EventFragment;
    "StringRemoved(address,string,string)": EventFragment;
    "StringSet(address,string,string)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AddressAddEvent = TypedEvent<
  [string, string, string],
  { originAddress: string; key: string; destinationAddress: string }
>;

export type AddressAddEventFilter = TypedEventFilter<AddressAddEvent>;

export type AddressRemovedEvent = TypedEvent<
  [string, string, string],
  { originAddress: string; key: string; destinationAddress: string }
>;

export type AddressRemovedEventFilter = TypedEventFilter<AddressRemovedEvent>;

export type AddressSetEvent = TypedEvent<
  [string, string, string],
  { originAddress: string; key: string; destinationAddress: string }
>;

export type AddressSetEventFilter = TypedEventFilter<AddressSetEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type BoolAddEvent = TypedEvent<
  [string, string, boolean],
  { originContract: string; key: string; value: boolean }
>;

export type BoolAddEventFilter = TypedEventFilter<BoolAddEvent>;

export type BoolRemovedEvent = TypedEvent<
  [string, string, boolean],
  { originContract: string; key: string; value: boolean }
>;

export type BoolRemovedEventFilter = TypedEventFilter<BoolRemovedEvent>;

export type BoolSetEvent = TypedEvent<
  [string, string, boolean],
  { originContract: string; key: string; value: boolean }
>;

export type BoolSetEventFilter = TypedEventFilter<BoolSetEvent>;

export type ContractURIEvent = TypedEvent<[string], { arg0: string }>;

export type ContractURIEventFilter = TypedEventFilter<ContractURIEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StringAddEvent = TypedEvent<
  [string, string, string],
  { originAddress: string; key: string; value: string }
>;

export type StringAddEventFilter = TypedEventFilter<StringAddEvent>;

export type StringRemovedEvent = TypedEvent<
  [string, string, string],
  { originAddress: string; key: string; value: string }
>;

export type StringRemovedEventFilter = TypedEventFilter<StringRemovedEvent>;

export type StringSetEvent = TypedEvent<
  [string, string, string],
  { originAddress: string; key: string; value: string }
>;

export type StringSetEventFilter = TypedEventFilter<StringSetEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface OpenRepoUpgradable extends BaseContract {
  contractName: "OpenRepoUpgradable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpenRepoUpgradableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressAdd(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressGet(key: string, overrides?: CallOverrides): Promise<[string]>;

    addressGetAll(key: string, overrides?: CallOverrides): Promise<[string[]]>;

    addressGetAllOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    addressGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressGetOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressHas(
      key: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addressHasOf(
      originContract: string,
      key: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addressRemove(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boolAdd(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boolGet(key: string, overrides?: CallOverrides): Promise<[boolean]>;

    boolGetAll(key: string, overrides?: CallOverrides): Promise<[boolean[]]>;

    boolGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolGetOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolRemove(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boolSet(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stringAdd(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stringGet(key: string, overrides?: CallOverrides): Promise<[string]>;

    stringGetAll(key: string, overrides?: CallOverrides): Promise<[string[]]>;

    stringGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetOf(
      ownerAddr: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringRemove(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stringSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressAdd(
    key: string,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressGet(key: string, overrides?: CallOverrides): Promise<string>;

  addressGetAll(key: string, overrides?: CallOverrides): Promise<string[]>;

  addressGetAllOf(
    originContract: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  addressGetIndex(
    key: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addressGetIndexOf(
    originContract: string,
    key: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addressGetOf(
    originContract: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  addressHas(
    key: string,
    targetAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addressHasOf(
    originContract: string,
    key: string,
    targetAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addressRemove(
    key: string,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressSet(
    key: string,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boolAdd(
    key: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boolGet(key: string, overrides?: CallOverrides): Promise<boolean>;

  boolGetAll(key: string, overrides?: CallOverrides): Promise<boolean[]>;

  boolGetIndex(
    key: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolGetIndexOf(
    originContract: string,
    key: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolGetOf(
    originContract: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolRemove(
    key: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boolSet(
    key: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stringAdd(
    key: string,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stringGet(key: string, overrides?: CallOverrides): Promise<string>;

  stringGetAll(key: string, overrides?: CallOverrides): Promise<string[]>;

  stringGetIndex(
    key: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetIndexOf(
    originContract: string,
    key: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetOf(
    ownerAddr: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  stringRemove(
    key: string,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stringSet(
    key: string,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressAdd(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addressGet(key: string, overrides?: CallOverrides): Promise<string>;

    addressGetAll(key: string, overrides?: CallOverrides): Promise<string[]>;

    addressGetAllOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    addressGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addressGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addressGetOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    addressHas(
      key: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addressHasOf(
      originContract: string,
      key: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addressRemove(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addressSet(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    boolAdd(
      key: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    boolGet(key: string, overrides?: CallOverrides): Promise<boolean>;

    boolGetAll(key: string, overrides?: CallOverrides): Promise<boolean[]>;

    boolGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolGetOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolRemove(
      key: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    boolSet(
      key: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stringAdd(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stringGet(key: string, overrides?: CallOverrides): Promise<string>;

    stringGetAll(key: string, overrides?: CallOverrides): Promise<string[]>;

    stringGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetOf(
      ownerAddr: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    stringRemove(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stringSet(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressAdd(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressAddEventFilter;
    AddressAdd(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressAddEventFilter;

    "AddressRemoved(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressRemovedEventFilter;
    AddressRemoved(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressRemovedEventFilter;

    "AddressSet(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressSetEventFilter;
    AddressSet(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressSetEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BoolAdd(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolAddEventFilter;
    BoolAdd(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolAddEventFilter;

    "BoolRemoved(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolRemovedEventFilter;
    BoolRemoved(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolRemovedEventFilter;

    "BoolSet(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolSetEventFilter;
    BoolSet(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolSetEventFilter;

    "ContractURI(string)"(arg0?: null): ContractURIEventFilter;
    ContractURI(arg0?: null): ContractURIEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StringAdd(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringAddEventFilter;
    StringAdd(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringAddEventFilter;

    "StringRemoved(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringRemovedEventFilter;
    StringRemoved(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringRemovedEventFilter;

    "StringSet(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringSetEventFilter;
    StringSet(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringSetEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addressAdd(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressGet(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    addressGetAll(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    addressGetAllOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressHas(
      key: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressHasOf(
      originContract: string,
      key: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressRemove(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boolAdd(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boolGet(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    boolGetAll(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    boolGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolRemove(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boolSet(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stringAdd(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stringGet(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    stringGetAll(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    stringGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetOf(
      ownerAddr: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringRemove(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stringSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressAdd(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressGet(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetAll(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetAllOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressHas(
      key: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressHasOf(
      originContract: string,
      key: string,
      targetAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressRemove(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boolAdd(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boolGet(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetAll(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolRemove(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boolSet(
      key: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stringAdd(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stringGet(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetAll(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetIndexOf(
      originContract: string,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetOf(
      ownerAddr: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringRemove(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stringSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
