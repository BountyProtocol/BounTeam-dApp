/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ITaskInterface extends utils.Interface {
  contractName: "ITask";
  functions: {
    "acceptApplicant(uint256)": FunctionFragment;
    "application(string)": FunctionFragment;
    "cancel(string,address[])": FunctionFragment;
    "deliveryApprove(uint256)": FunctionFragment;
    "deliveryReject(uint256,string)": FunctionFragment;
    "disburse(address[])": FunctionFragment;
    "refund(address[])": FunctionFragment;
    "stageCancel(string)": FunctionFragment;
    "stageExecusion(address[])": FunctionFragment;
    "stageOpen()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptApplicant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "application", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveryApprove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveryReject",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "disburse", values: [string[]]): string;
  encodeFunctionData(functionFragment: "refund", values: [string[]]): string;
  encodeFunctionData(functionFragment: "stageCancel", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stageExecusion",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "stageOpen", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptApplicant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "application",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deliveryApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliveryReject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disburse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stageCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stageExecusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stageOpen", data: BytesLike): Result;

  events: {
    "DeliveryRejected(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeliveryRejected"): EventFragment;
}

export type DeliveryRejectedEvent = TypedEvent<
  [string, BigNumber, string],
  { admin: string; sbtId: BigNumber; uri: string }
>;

export type DeliveryRejectedEventFilter =
  TypedEventFilter<DeliveryRejectedEvent>;

export interface ITask extends BaseContract {
  contractName: "ITask";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITaskInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptApplicant(
      sbtId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    application(
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      uri_: string,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deliveryApprove(
      sbtId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deliveryReject(
      sbtId: BigNumberish,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disburse(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stageCancel(
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stageExecusion(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stageOpen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptApplicant(
    sbtId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  application(
    uri_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    uri_: string,
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deliveryApprove(
    sbtId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deliveryReject(
    sbtId: BigNumberish,
    uri_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disburse(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stageCancel(
    uri_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stageExecusion(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stageOpen(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptApplicant(
      sbtId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    application(uri_: string, overrides?: CallOverrides): Promise<void>;

    cancel(
      uri_: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    deliveryApprove(
      sbtId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deliveryReject(
      sbtId: BigNumberish,
      uri_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disburse(tokens: string[], overrides?: CallOverrides): Promise<void>;

    refund(tokens: string[], overrides?: CallOverrides): Promise<void>;

    stageCancel(uri_: string, overrides?: CallOverrides): Promise<void>;

    stageExecusion(tokens: string[], overrides?: CallOverrides): Promise<void>;

    stageOpen(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DeliveryRejected(address,uint256,string)"(
      admin?: null,
      sbtId?: null,
      uri?: null
    ): DeliveryRejectedEventFilter;
    DeliveryRejected(
      admin?: null,
      sbtId?: null,
      uri?: null
    ): DeliveryRejectedEventFilter;
  };

  estimateGas: {
    acceptApplicant(
      sbtId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    application(
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      uri_: string,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deliveryApprove(
      sbtId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deliveryReject(
      sbtId: BigNumberish,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disburse(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stageCancel(
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stageExecusion(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stageOpen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptApplicant(
      sbtId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    application(
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      uri_: string,
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deliveryApprove(
      sbtId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deliveryReject(
      sbtId: BigNumberish,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disburse(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stageCancel(
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stageExecusion(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stageOpen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
