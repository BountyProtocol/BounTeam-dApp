/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OpinionRepoInterface extends utils.Interface {
  contractName: "OpinionRepo";
  functions: {
    "getExtTokenId(address)": FunctionFragment;
    "getTargetContract()": FunctionFragment;
    "getValueByDomain(uint256,uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getExtTokenId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValueByDomain",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getExtTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueByDomain",
    data: BytesLike
  ): Result;

  events: {
    "OpinionChange(uint256,uint256,string,int8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OpinionChange"): EventFragment;
}

export type OpinionChangeEvent = TypedEvent<
  [BigNumber, BigNumber, string, number],
  { origin: BigNumber; target: BigNumber; domain: string; score: number }
>;

export type OpinionChangeEventFilter = TypedEventFilter<OpinionChangeEvent>;

export interface OpinionRepo extends BaseContract {
  contractName: "OpinionRepo";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpinionRepoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getExtTokenId(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTargetContract(overrides?: CallOverrides): Promise<[string]>;

    getValueByDomain(
      originSBT: BigNumberish,
      targetSBT: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getExtTokenId(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTargetContract(overrides?: CallOverrides): Promise<string>;

  getValueByDomain(
    originSBT: BigNumberish,
    targetSBT: BigNumberish,
    domain: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getExtTokenId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetContract(overrides?: CallOverrides): Promise<string>;

    getValueByDomain(
      originSBT: BigNumberish,
      targetSBT: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OpinionChange(uint256,uint256,string,int8)"(
      origin?: BigNumberish | null,
      target?: BigNumberish | null,
      domain?: null,
      score?: null
    ): OpinionChangeEventFilter;
    OpinionChange(
      origin?: BigNumberish | null,
      target?: BigNumberish | null,
      domain?: null,
      score?: null
    ): OpinionChangeEventFilter;
  };

  estimateGas: {
    getExtTokenId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetContract(overrides?: CallOverrides): Promise<BigNumber>;

    getValueByDomain(
      originSBT: BigNumberish,
      targetSBT: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExtTokenId(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValueByDomain(
      originSBT: BigNumberish,
      targetSBT: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
