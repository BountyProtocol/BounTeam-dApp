/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Dummy, DummyInterface } from "../../../contracts/mock/Dummy";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "debugFunc",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ef8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063dab11a6a14602d575b600080fd5b604080518082018252601181527048656c6c6f20576f726c642044756d6d7960781b60208201529051605e91906067565b60405180910390f35b600060208083528351808285015260005b818110156092578581018301518582016040015282016078565b8181111560a3576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212209da7607f25f2e79e5ef7c34e18cc635010ceaf6e00fa24a7d65e7ca8dffc136364736f6c634300080e0033";

type DummyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dummy__factory extends ContractFactory {
  constructor(...args: DummyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Dummy> {
    return super.deploy(overrides || {}) as Promise<Dummy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Dummy {
    return super.attach(address) as Dummy;
  }
  override connect(signer: Signer): Dummy__factory {
    return super.connect(signer) as Dummy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyInterface {
    return new utils.Interface(_abi) as DummyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Dummy {
    return new Contract(address, _abi, signerOrProvider) as Dummy;
  }
}
