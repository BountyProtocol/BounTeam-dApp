/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RuleExt,
  RuleExtInterface,
} from "../../../contracts/extensions/RuleExt";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "confirmationGet",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "ruling",
            type: "string",
          },
          {
            internalType: "bool",
            name: "evidence",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "witness",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.Confirmation",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "effectsGet",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "domain",
            type: "string",
          },
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.RepChange[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRepoAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hub",
    outputs: [
      {
        internalType: "contract IHub",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "about",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "affected",
            type: "string",
          },
          {
            internalType: "bool",
            name: "negation",
            type: "bool",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Rule",
        name: "rule",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "string",
            name: "ruling",
            type: "string",
          },
          {
            internalType: "bool",
            name: "evidence",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "witness",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.Confirmation",
        name: "confirmation",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "string",
            name: "domain",
            type: "string",
          },
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.RepChange[]",
        name: "effects",
        type: "tuple[]",
      },
    ],
    name: "ruleAdd",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "ruling",
            type: "string",
          },
          {
            internalType: "bool",
            name: "evidence",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "witness",
            type: "uint256",
          },
        ],
        internalType: "struct DataTypes.Confirmation",
        name: "confirmation",
        type: "tuple",
      },
    ],
    name: "ruleConfirmationUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "disabled",
        type: "bool",
      },
    ],
    name: "ruleDisable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ruleGet",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "about",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "affected",
            type: "string",
          },
          {
            internalType: "bool",
            name: "negation",
            type: "bool",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Rule",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "about",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "affected",
            type: "string",
          },
          {
            internalType: "bool",
            name: "negation",
            type: "bool",
          },
          {
            internalType: "string",
            name: "uri",
            type: "string",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.Rule",
        name: "rule",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "string",
            name: "domain",
            type: "string",
          },
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "bool",
            name: "disabled",
            type: "bool",
          },
        ],
        internalType: "struct DataTypes.RepChange[]",
        name: "effects",
        type: "tuple[]",
      },
    ],
    name: "ruleUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506112ea806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c8063365a86fc1461008857806339088b46146100ad5780633dda390c146100c25780636e58f657146100e357806382f5a541146101035780638f936ce914610123578063980b6fd2146101365780639e92fd8e14610149578063a93b5fa714610151575b600080fd5b610090610171565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c06100bb366004610f11565b610180565b005b6100d56100d0366004610deb565b610286565b6040519081526020016100a4565b6100f66100f1366004610e6e565b6103a9565b6040516100a491906110ff565b610116610111366004610e6e565b610465565b6040516100a491906110b5565b6100c0610131366004610ecd565b6104f0565b6100c0610144366004610e9e565b6105ea565b6100906106b8565b61016461015f366004610e6e565b61072b565b6040516100a491906110ec565b600061017b6107da565b905090565b60405163dae4a17f60e01b8152309063dae4a17f906101a3903390600401611084565b60206040518083038186803b1580156101bb57600080fd5b505afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190610c8d565b6102185760405162461bcd60e51b815260040161020f906110c8565b60405180910390fd5b610220610815565b6001600160a01b03166339088b468484846040518463ffffffff1660e01b815260040161024f9392919061116e565b600060405180830381600087803b15801561026957600080fd5b505af115801561027d573d6000803e3d6000fd5b50505050505050565b60405163dae4a17f60e01b8152600090309063dae4a17f906102ac903390600401611084565b60206040518083038186803b1580156102c457600080fd5b505afa1580156102d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fc9190610c8d565b6103185760405162461bcd60e51b815260040161020f906110c8565b610320610815565b6001600160a01b0316633dda390c8585856040518463ffffffff1660e01b815260040161034f93929190611112565b602060405180830381600087803b15801561036957600080fd5b505af115801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a19190610e86565b949350505050565b6040805160a08101825260008082526060602083018190529282018190528282019290925260808101919091526103de610815565b6001600160a01b0316636e58f657836040518263ffffffff1660e01b815260040161040b91815260200190565b60006040518083038186803b15801561042357600080fd5b505afa158015610437573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261045f9190810190610d34565b92915050565b606061046f610815565b6001600160a01b03166382f5a541836040518263ffffffff1660e01b815260040161049c91815260200190565b60006040518083038186803b1580156104b457600080fd5b505afa1580156104c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261045f9190810190610b8e565b60405163dae4a17f60e01b8152309063dae4a17f90610513903390600401611084565b60206040518083038186803b15801561052b57600080fd5b505afa15801561053f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105639190610c8d565b61057f5760405162461bcd60e51b815260040161020f906110c8565b610587610815565b6001600160a01b0316638f936ce983836040518363ffffffff1660e01b81526004016105b4929190611155565b600060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b505050505050565b60405163dae4a17f60e01b8152309063dae4a17f9061060d903390600401611084565b60206040518083038186803b15801561062557600080fd5b505afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d9190610c8d565b6106795760405162461bcd60e51b815260040161020f906110c8565b610681610815565b604051634c05b7e960e11b81526004810184905282151560248201526001600160a01b03919091169063980b6fd2906044016105b4565b6000306001600160a01b0316639e92fd8e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f357600080fd5b505afa158015610707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017b9190610b60565b610751604051806060016040528060608152602001600015158152602001600081525090565b610759610815565b6001600160a01b031663a93b5fa7836040518263ffffffff1660e01b815260040161078691815260200190565b60006040518083038186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261045f9190810190610ca9565b6000306001600160a01b0316632db9a5126040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f357600080fd5b6000806108206108cc565b6001600160a01b031663e2b49cb96108366107da565b604080516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152600960448201526852554c455f5245504f60b81b606482015260840160206040518083038186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190610b60565b600061017b6106b8565b600082601f8301126108e6578081fd5b813560206108fb6108f683611213565b6111e3565b80838252828201915082860187848660051b890101111561091a578586fd5b855b858110156109af5781356001600160401b038082111561093a578889fd5b908901906060828c03601f190181131561095257898afd5b61095a611199565b888401358381111561096a578b8cfd5b6109788e8b838801016109cc565b8252506040848101358a83015293820135939250610995846112a3565b91820192909252855250928401929084019060010161091c565b5090979650505050505050565b80516109c7816112a3565b919050565b600082601f8301126109dc578081fd5b81356109ea6108f682611236565b8181528460208386010111156109fe578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112610a28578081fd5b8151610a366108f682611236565b818152846020838601011115610a4a578283fd5b6103a182602083016020870161125d565b600060608284031215610a6c578081fd5b610a74611199565b905081356001600160401b03811115610a8c57600080fd5b610a98848285016109cc565b8252506020820135610aa9816112a3565b806020830152506040820135604082015292915050565b600060a08284031215610ad1578081fd5b610ad96111c1565b82358152905060208201356001600160401b0380821115610af957600080fd5b610b05858386016109cc565b602084015260408401359150610b1a826112a3565b8160408401526060840135915080821115610b3457600080fd5b50610b41848285016109cc565b6060830152506080820135610b55816112a3565b608082015292915050565b600060208284031215610b71578081fd5b81516001600160a01b0381168114610b87578182fd5b9392505050565b60006020808385031215610ba0578182fd5b82516001600160401b0380821115610bb6578384fd5b818501915085601f830112610bc9578384fd5b8151610bd76108f682611213565b80828252858201915085850189878560051b8801011115610bf6578788fd5b875b84811015610c7e57815186811115610c0e57898afd5b87016060818d03601f1901811315610c24578a8bfd5b610c2c611199565b8a83015189811115610c3c578c8dfd5b610c4a8f8d83870101610a18565b8252506040838101518c8301529282015192610c65846112a3565b8101929092525084529287019290870190600101610bf8565b50909998505050505050505050565b600060208284031215610c9e578081fd5b8151610b87816112a3565b600060208284031215610cba578081fd5b81516001600160401b0380821115610cd0578283fd5b9083019060608286031215610ce3578283fd5b610ceb611199565b825182811115610cf9578485fd5b610d0587828601610a18565b82525060208301519150610d18826112a3565b8160208201526040830151604082015280935050505092915050565b600060208284031215610d45578081fd5b81516001600160401b0380821115610d5b578283fd5b9083019060a08286031215610d6e578283fd5b610d766111c1565b82518152602083015182811115610d8b578485fd5b610d9787828601610a18565b602083015250610da9604084016109bc565b6040820152606083015182811115610dbf578485fd5b610dcb87828601610a18565b606083015250610ddd608084016109bc565b608082015295945050505050565b600080600060608486031215610dff578182fd5b83356001600160401b0380821115610e15578384fd5b610e2187838801610ac0565b94506020860135915080821115610e36578384fd5b610e4287838801610a5b565b93506040860135915080821115610e57578283fd5b50610e64868287016108d6565b9150509250925092565b600060208284031215610e7f578081fd5b5035919050565b600060208284031215610e97578081fd5b5051919050565b60008060408385031215610eb0578182fd5b823591506020830135610ec2816112a3565b809150509250929050565b60008060408385031215610edf578182fd5b8235915060208301356001600160401b03811115610efb578182fd5b610f0785828601610a5b565b9150509250929050565b600080600060608486031215610f25578081fd5b8335925060208401356001600160401b0380821115610f42578283fd5b610e4287838801610ac0565b600081518084526020808501808196508360051b81019150828601855b85811015610fb7578284038952815160608151818752610f8d82880182610fc4565b83890151888a01526040938401511515939097019290925250509784019790840190600101610f6b565b5091979650505050505050565b60008151808452610fdc81602086016020860161125d565b601f01601f19169290920160200192915050565b60008151606084526110056060850182610fc4565b9050602083015115156020850152604083015160408501528091505092915050565b805182526000602082015160a0602085015261104660a0850182610fc4565b90506040830151151560408501526060830151848203606086015261106b8282610fc4565b9150506080830151151560808501528091505092915050565b6001600160a01b039190911681526040602082018190526005908201526430b236b4b760d91b606082015260800190565b602081526000610b876020830184610f4e565b6020808252600a908201526941646d696e204f6e6c7960b01b604082015260600190565b602081526000610b876020830184610ff0565b602081526000610b876020830184611027565b6060815260006111256060830186611027565b82810360208401526111378186610ff0565b9050828103604084015261114b8185610f4e565b9695505050505050565b8281526040602082015260006103a16040830184610ff0565b8381526060602082015260006111876060830185611027565b828103604084015261114b8185610f4e565b604051606081016001600160401b03811182821017156111bb576111bb61128d565b60405290565b60405160a081016001600160401b03811182821017156111bb576111bb61128d565b604051601f8201601f191681016001600160401b038111828210171561120b5761120b61128d565b604052919050565b60006001600160401b0382111561122c5761122c61128d565b5060051b60200190565b60006001600160401b0382111561124f5761124f61128d565b50601f01601f191660200190565b60005b83811015611278578181015183820152602001611260565b83811115611287576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b80151581146112b157600080fd5b5056fea264697066735822122018fde7551bcb46d6e68ccf42a5a9ac8022f5a0199504ae1655b8830f42821dcc64736f6c63430008040033";

type RuleExtConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RuleExtConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RuleExt__factory extends ContractFactory {
  constructor(...args: RuleExtConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RuleExt> {
    return super.deploy(overrides || {}) as Promise<RuleExt>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RuleExt {
    return super.attach(address) as RuleExt;
  }
  override connect(signer: Signer): RuleExt__factory {
    return super.connect(signer) as RuleExt__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RuleExtInterface {
    return new utils.Interface(_abi) as RuleExtInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RuleExt {
    return new Contract(address, _abi, signerOrProvider) as RuleExt;
  }
}
