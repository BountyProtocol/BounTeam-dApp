/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MultiCall,
  MultiCallInterface,
} from "../../../../contracts/abstract/MultiCall2.sol/MultiCall";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "etherAmount",
        type: "uint256",
      },
    ],
    name: "MultiCallFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address payable[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "payloads",
        type: "bytes[]",
      },
      {
        internalType: "uint256[]",
        name: "etherAmounts",
        type: "uint256[]",
      },
    ],
    name: "multiCall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610714806100206000396000f3fe60806040526004361061001e5760003560e01c80639d1e6c7914610023575b600080fd5b61003661003136600461040d565b61004c565b6040516100439190610579565b60405180910390f35b8251825160609190811461007b5760405162461bcd60e51b8152600401610072906105da565b60405180910390fd5b8083511461009b5760405162461bcd60e51b8152600401610072906105da565b83516001600160401b038111156100c257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156100f557816020015b60608152602001906001900390816100e05790505b50915060005b818110156102b55760008087838151811061012657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031686848151811061015757634e487b7160e01b600052603260045260246000fd5b602002602001015188858151811061017f57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516101949190610529565b60006040518083038185875af1925050503d80600081146101d1576040519150601f19603f3d011682016040523d82523d6000602084013e6101d6565b606091505b5091509150816102745787838151811061020057634e487b7160e01b600052603260045260246000fd5b602002602001015187848151811061022857634e487b7160e01b600052603260045260246000fd5b602002602001015187858151811061025057634e487b7160e01b600052603260045260246000fd5b602002602001015160405163e07f0b4960e01b815260040161007293929190610545565b8085848151811061029557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806102ad906106a1565b9150506100fb565b50509392505050565b6000601f83818401126102cf578182fd5b823560206102e46102df8361064e565b61061e565b80838252828201915082870188848660051b8a01011115610303578687fd5b865b858110156103955781356001600160401b038082111561032357898afd5b818b0191508b603f83011261033657898afd5b8682013560408282111561034c5761034c6106c8565b61035d828c01601f19168a0161061e565b92508183528d81838601011115610372578b8cfd5b818185018a85013750810187018a90528552509284019290840190600101610305565b509098975050505050505050565b600082601f8301126103b3578081fd5b813560206103c36102df8361064e565b80838252828201915082860187848660051b89010111156103e2578586fd5b855b85811015610400578135845292840192908401906001016103e4565b5090979650505050505050565b600080600060608486031215610421578283fd5b83356001600160401b0380821115610437578485fd5b818601915086601f83011261044a578485fd5b8135602061045a6102df8361064e565b8083825282820191508286018b848660051b890101111561047957898afd5b8996505b848710156104af5780356001600160a01b038116811461049b578a8bfd5b83526001969096019591830191830161047d565b50975050870135925050808211156104c5578384fd5b6104d1878388016102be565b935060408601359150808211156104e6578283fd5b506104f3868287016103a3565b9150509250925092565b60008151808452610515816020860160208601610671565b601f01601f19169290920160200192915050565b6000825161053b818460208701610671565b9190910192915050565b6001600160a01b0384168152606060208201819052600090610569908301856104fd565b9050826040830152949350505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b828110156105cd57603f198886030184526105bb8583516104fd565b9450928501929085019060010161059f565b5092979650505050505050565b60208082526024908201527f496e70757420617272617973206d757374206265207468652073616d65206c656040820152630dccee8d60e31b606082015260800190565b604051601f8201601f191681016001600160401b0381118282101715610646576106466106c8565b604052919050565b60006001600160401b03821115610667576106676106c8565b5060051b60200190565b60005b8381101561068c578181015183820152602001610674565b8381111561069b576000848401525b50505050565b60006000198214156106c157634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220bef2b691fa65c7b7379ae2b2c9b9b509eac6cab83868010819803e2ace7f702964736f6c63430008040033";

type MultiCallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiCallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiCall__factory extends ContractFactory {
  constructor(...args: MultiCallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiCall> {
    return super.deploy(overrides || {}) as Promise<MultiCall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiCall {
    return super.attach(address) as MultiCall;
  }
  override connect(signer: Signer): MultiCall__factory {
    return super.connect(signer) as MultiCall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiCallInterface {
    return new utils.Interface(_abi) as MultiCallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiCall {
    return new Contract(address, _abi, signerOrProvider) as MultiCall;
  }
}
