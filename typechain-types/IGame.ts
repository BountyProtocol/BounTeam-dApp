/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IGameInterface extends utils.Interface {
  contractName: "IGame";
  functions: {
    "claimDisable(address)": FunctionFragment;
    "claimHas(address)": FunctionFragment;
    "initialize(string)": FunctionFragment;
    "join()": FunctionFragment;
    "leave()": FunctionFragment;
    "onClaimConfirmed(uint256,address,uint256)": FunctionFragment;
    "post(string,uint256,string)": FunctionFragment;
    "reportEvent(uint256,address,string)": FunctionFragment;
    "symbol()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimDisable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "claimHas", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onClaimConfirmed",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reportEvent",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimDisable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimHas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onClaimConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;

  events: {
    "EffectsExecuted(uint256,uint256,bytes)": EventFragment;
    "EventConfirmed(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EffectsExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventConfirmed"): EventFragment;
}

export type EffectsExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { targetTokenId: BigNumber; ruleId: BigNumber; data: string }
>;

export type EffectsExecutedEventFilter = TypedEventFilter<EffectsExecutedEvent>;

export type EventConfirmedEvent = TypedEvent<
  [BigNumber, string],
  { ruleId: BigNumber; uri: string }
>;

export type EventConfirmedEventFilter = TypedEventFilter<EventConfirmedEvent>;

export interface IGame extends BaseContract {
  contractName: "IGame";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimDisable(
      claimContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimHas(
      claimContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      name_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    join(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onClaimConfirmed(
      ruleId: BigNumberish,
      targetContract: string,
      targetTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    post(
      entRole: string,
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reportEvent(
      ruleId: BigNumberish,
      account: string,
      detailsURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;
  };

  claimDisable(
    claimContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimHas(claimContract: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    name_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  join(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  leave(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onClaimConfirmed(
    ruleId: BigNumberish,
    targetContract: string,
    targetTokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  post(
    entRole: string,
    tokenId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reportEvent(
    ruleId: BigNumberish,
    account: string,
    detailsURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimDisable(
      claimContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimHas(
      claimContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(name_: string, overrides?: CallOverrides): Promise<void>;

    join(overrides?: CallOverrides): Promise<BigNumber>;

    leave(overrides?: CallOverrides): Promise<BigNumber>;

    onClaimConfirmed(
      ruleId: BigNumberish,
      targetContract: string,
      targetTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    post(
      entRole: string,
      tokenId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reportEvent(
      ruleId: BigNumberish,
      account: string,
      detailsURI_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EffectsExecuted(uint256,uint256,bytes)"(
      targetTokenId?: BigNumberish | null,
      ruleId?: BigNumberish | null,
      data?: null
    ): EffectsExecutedEventFilter;
    EffectsExecuted(
      targetTokenId?: BigNumberish | null,
      ruleId?: BigNumberish | null,
      data?: null
    ): EffectsExecutedEventFilter;

    "EventConfirmed(uint256,string)"(
      ruleId?: BigNumberish | null,
      uri?: null
    ): EventConfirmedEventFilter;
    EventConfirmed(
      ruleId?: BigNumberish | null,
      uri?: null
    ): EventConfirmedEventFilter;
  };

  estimateGas: {
    claimDisable(
      claimContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimHas(
      claimContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      name_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    join(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onClaimConfirmed(
      ruleId: BigNumberish,
      targetContract: string,
      targetTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    post(
      entRole: string,
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reportEvent(
      ruleId: BigNumberish,
      account: string,
      detailsURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimDisable(
      claimContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimHas(
      claimContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      name_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    join(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onClaimConfirmed(
      ruleId: BigNumberish,
      targetContract: string,
      targetTokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    post(
      entRole: string,
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reportEvent(
      ruleId: BigNumberish,
      account: string,
      detailsURI_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
