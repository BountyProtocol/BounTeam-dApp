/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ISoulInterface extends utils.Interface {
  contractName: "ISoul";
  functions: {
    "accountURI(address)": FunctionFragment;
    "announcement(uint256,string,string)": FunctionFragment;
    "handleFind(string)": FunctionFragment;
    "handleGet(uint256)": FunctionFragment;
    "handleSet(uint256,string)": FunctionFragment;
    "hasTokenControl(uint256)": FunctionFragment;
    "hasTokenControlAccount(uint256,address)": FunctionFragment;
    "mint(string)": FunctionFragment;
    "mintFor(address,string)": FunctionFragment;
    "opinionAboutSoul(uint256,string,int256)": FunctionFragment;
    "opinionAboutToken(address,uint256,string,int256)": FunctionFragment;
    "tokenByAddress(address)": FunctionFragment;
    "tokenOwnerAdd(address,uint256)": FunctionFragment;
    "tokenOwnerRemove(address,uint256)": FunctionFragment;
    "update(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accountURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "announcement",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "handleFind", values: [string]): string;
  encodeFunctionData(
    functionFragment: "handleGet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleSet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTokenControl",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTokenControlAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "opinionAboutSoul",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "opinionAboutToken",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerAdd",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerRemove",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "accountURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "announcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleFind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handleGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handleSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasTokenControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasTokenControlAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "opinionAboutSoul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opinionAboutToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "Announcement(address,uint256,string,string)": EventFragment;
    "ReputationChange(uint256,string,bool,uint256)": EventFragment;
    "SoulHandle(uint256,string)": EventFragment;
    "SoulType(uint256,string)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Announcement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoulHandle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoulType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type AnnouncementEvent = TypedEvent<
  [string, BigNumber, string, string],
  { account: string; tokenId: BigNumber; uri: string; context: string }
>;

export type AnnouncementEventFilter = TypedEventFilter<AnnouncementEvent>;

export type ReputationChangeEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  { id: BigNumber; domain: string; rating: boolean; score: BigNumber }
>;

export type ReputationChangeEventFilter =
  TypedEventFilter<ReputationChangeEvent>;

export type SoulHandleEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; handle: string }
>;

export type SoulHandleEventFilter = TypedEventFilter<SoulHandleEvent>;

export type SoulTypeEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; soulType: string }
>;

export type SoulTypeEventFilter = TypedEventFilter<SoulTypeEvent>;

export type URIEvent = TypedEvent<
  [string, BigNumber],
  { value: string; id: BigNumber }
>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface ISoul extends BaseContract {
  contractName: "ISoul";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISoulInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountURI(account: string, overrides?: CallOverrides): Promise<[string]>;

    announcement(
      tokenId: BigNumberish,
      uri: string,
      context: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handleFind(handle: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    handleGet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handleSet(
      tokenId: BigNumberish,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasTokenControl(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasTokenControlAccount(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintFor(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    opinionAboutSoul(
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    opinionAboutToken(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOwnerAdd(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenOwnerRemove(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountURI(account: string, overrides?: CallOverrides): Promise<string>;

  announcement(
    tokenId: BigNumberish,
    uri: string,
    context: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handleFind(handle: string, overrides?: CallOverrides): Promise<BigNumber>;

  handleGet(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  handleSet(
    tokenId: BigNumberish,
    handle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasTokenControl(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasTokenControlAccount(
    tokenId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintFor(
    to: string,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  opinionAboutSoul(
    tokenId: BigNumberish,
    domain: string,
    score: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  opinionAboutToken(
    contractAddr: string,
    tokenId: BigNumberish,
    domain: string,
    score: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenByAddress(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenOwnerAdd(
    owner: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenOwnerRemove(
    owner: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    tokenId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountURI(account: string, overrides?: CallOverrides): Promise<string>;

    announcement(
      tokenId: BigNumberish,
      uri: string,
      context: string,
      overrides?: CallOverrides
    ): Promise<void>;

    handleFind(handle: string, overrides?: CallOverrides): Promise<BigNumber>;

    handleGet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    handleSet(
      tokenId: BigNumberish,
      handle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasTokenControl(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasTokenControlAccount(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(tokenURI: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintFor(
      to: string,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    opinionAboutSoul(
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    opinionAboutToken(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwnerAdd(
      owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOwnerRemove(
      owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      tokenId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Announcement(address,uint256,string,string)"(
      account?: string | null,
      tokenId?: null,
      uri?: null,
      context?: null
    ): AnnouncementEventFilter;
    Announcement(
      account?: string | null,
      tokenId?: null,
      uri?: null,
      context?: null
    ): AnnouncementEventFilter;

    "ReputationChange(uint256,string,bool,uint256)"(
      id?: BigNumberish | null,
      domain?: null,
      rating?: null,
      score?: null
    ): ReputationChangeEventFilter;
    ReputationChange(
      id?: BigNumberish | null,
      domain?: null,
      rating?: null,
      score?: null
    ): ReputationChangeEventFilter;

    "SoulHandle(uint256,string)"(
      tokenId?: BigNumberish | null,
      handle?: null
    ): SoulHandleEventFilter;
    SoulHandle(
      tokenId?: BigNumberish | null,
      handle?: null
    ): SoulHandleEventFilter;

    "SoulType(uint256,string)"(
      tokenId?: BigNumberish | null,
      soulType?: null
    ): SoulTypeEventFilter;
    SoulType(
      tokenId?: BigNumberish | null,
      soulType?: null
    ): SoulTypeEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    accountURI(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    announcement(
      tokenId: BigNumberish,
      uri: string,
      context: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handleFind(handle: string, overrides?: CallOverrides): Promise<BigNumber>;

    handleGet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleSet(
      tokenId: BigNumberish,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasTokenControl(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasTokenControlAccount(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintFor(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    opinionAboutSoul(
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    opinionAboutToken(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwnerAdd(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenOwnerRemove(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountURI(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    announcement(
      tokenId: BigNumberish,
      uri: string,
      context: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handleFind(
      handle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleGet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleSet(
      tokenId: BigNumberish,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasTokenControl(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasTokenControlAccount(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintFor(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    opinionAboutSoul(
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    opinionAboutToken(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOwnerAdd(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenOwnerRemove(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
