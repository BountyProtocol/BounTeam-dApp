/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SoulUpgradableInterface extends utils.Interface {
  contractName: "SoulUpgradable";
  functions: {
    "accountURI(address)": FunctionFragment;
    "announcement(uint256,string,string)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCurrentSBT()": FunctionFragment;
    "getHub()": FunctionFragment;
    "getOpinion(uint256,address,uint256,string)": FunctionFragment;
    "getOpinionMine(address,uint256,string)": FunctionFragment;
    "getOpinionOnSoul(uint256,string)": FunctionFragment;
    "getPastRepForDomain(uint256,address,uint256,string,uint256)": FunctionFragment;
    "getRepoAddr()": FunctionFragment;
    "handleFind(string)": FunctionFragment;
    "handleGet(uint256)": FunctionFragment;
    "handleSet(uint256,string)": FunctionFragment;
    "hasTokenControl(uint256)": FunctionFragment;
    "hasTokenControlAccount(uint256,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(string)": FunctionFragment;
    "mintFor(address,string)": FunctionFragment;
    "name()": FunctionFragment;
    "opinionAboutSoul(uint256,string,int256)": FunctionFragment;
    "opinionAboutToken(address,uint256,string,int256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "relAdd(string,uint256)": FunctionFragment;
    "relGet(string)": FunctionFragment;
    "relGetAll(string)": FunctionFragment;
    "relGetAllOf(uint256,string)": FunctionFragment;
    "relGetIndex(string,uint256)": FunctionFragment;
    "relGetIndexOf(uint256,string,uint256)": FunctionFragment;
    "relGetOf(uint256,string)": FunctionFragment;
    "relRemove(string,uint256)": FunctionFragment;
    "relSet(string,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setHub(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByAddress(address)": FunctionFragment;
    "tokenOwnerAdd(address,uint256)": FunctionFragment;
    "tokenOwnerRemove(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "types(uint256)": FunctionFragment;
    "update(uint256,string)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accountURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "announcement",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSBT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getHub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOpinion",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpinionMine",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpinionOnSoul",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastRepForDomain",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRepoAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "handleFind", values: [string]): string;
  encodeFunctionData(
    functionFragment: "handleGet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleSet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTokenControl",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTokenControlAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintFor",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "opinionAboutSoul",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "opinionAboutToken",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relAdd",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "relGet", values: [string]): string;
  encodeFunctionData(functionFragment: "relGetAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "relGetAllOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "relGetIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relGetIndexOf",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relGetOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "relRemove",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relSet",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setHub", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerAdd",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerRemove",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "types", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "accountURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "announcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOpinion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOpinionMine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpinionOnSoul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastRepForDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRepoAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleFind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handleGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handleSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasTokenControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasTokenControlAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "opinionAboutSoul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opinionAboutToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relGetAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relGetAllOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relGetOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relRemove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "types", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Announcement(address,uint256,string,string)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OpinionChange(uint256,address,uint256,string,int256,int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RelAdd(uint256,string,uint256)": EventFragment;
    "RelRemoved(uint256,string,uint256)": EventFragment;
    "RelSet(uint256,string,uint256)": EventFragment;
    "ReputationChange(uint256,string,bool,uint256)": EventFragment;
    "SoulHandle(uint256,string)": EventFragment;
    "SoulType(uint256,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Announcement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpinionChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoulHandle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoulType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type AnnouncementEvent = TypedEvent<
  [string, BigNumber, string, string],
  { account: string; tokenId: BigNumber; uri: string; context: string }
>;

export type AnnouncementEventFilter = TypedEventFilter<AnnouncementEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type OpinionChangeEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber],
  {
    sbt: BigNumber;
    contractAddr: string;
    tokenId: BigNumber;
    domain: string;
    oldValue: BigNumber;
    newValue: BigNumber;
  }
>;

export type OpinionChangeEventFilter = TypedEventFilter<OpinionChangeEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RelAddEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { fromSBT: BigNumber; key: string; toSBT: BigNumber }
>;

export type RelAddEventFilter = TypedEventFilter<RelAddEvent>;

export type RelRemovedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { fromSBT: BigNumber; key: string; toSBT: BigNumber }
>;

export type RelRemovedEventFilter = TypedEventFilter<RelRemovedEvent>;

export type RelSetEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { fromSBT: BigNumber; key: string; toSBT: BigNumber }
>;

export type RelSetEventFilter = TypedEventFilter<RelSetEvent>;

export type ReputationChangeEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  { id: BigNumber; domain: string; rating: boolean; score: BigNumber }
>;

export type ReputationChangeEventFilter =
  TypedEventFilter<ReputationChangeEvent>;

export type SoulHandleEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; handle: string }
>;

export type SoulHandleEventFilter = TypedEventFilter<SoulHandleEvent>;

export type SoulTypeEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; soulType: string }
>;

export type SoulTypeEventFilter = TypedEventFilter<SoulTypeEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type URIEvent = TypedEvent<
  [string, BigNumber],
  { value: string; id: BigNumber }
>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SoulUpgradable extends BaseContract {
  contractName: "SoulUpgradable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SoulUpgradableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountURI(account: string, overrides?: CallOverrides): Promise<[string]>;

    announcement(
      tokenId: BigNumberish,
      uri_: string,
      context: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentSBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHub(overrides?: CallOverrides): Promise<[string]>;

    getOpinion(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpinionMine(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpinionOnSoul(
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastRepForDomain(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRepoAddr(overrides?: CallOverrides): Promise<[string]>;

    handleFind(handle: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    handleGet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handleSet(
      tokenId: BigNumberish,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasTokenControl(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasTokenControlAccount(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintFor(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    opinionAboutSoul(
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    opinionAboutToken(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    relAdd(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relGet(key: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    relGetAll(key: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    relGetAllOf(
      fromSBT: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    relGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    relGetIndexOf(
      fromSBT: BigNumberish,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    relGetOf(
      fromSBT: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    relRemove(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relSet(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHub(
      hubAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOwnerAdd(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenOwnerRemove(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    types(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    update(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountURI(account: string, overrides?: CallOverrides): Promise<string>;

  announcement(
    tokenId: BigNumberish,
    uri_: string,
    context: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

  getHub(overrides?: CallOverrides): Promise<string>;

  getOpinion(
    sbt: BigNumberish,
    contractAddr: string,
    tokenId: BigNumberish,
    domain: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpinionMine(
    contractAddr: string,
    tokenId: BigNumberish,
    domain: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpinionOnSoul(
    tokenId: BigNumberish,
    domain: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastRepForDomain(
    sbt: BigNumberish,
    contractAddr: string,
    tokenId: BigNumberish,
    domain: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRepoAddr(overrides?: CallOverrides): Promise<string>;

  handleFind(handle: string, overrides?: CallOverrides): Promise<BigNumber>;

  handleGet(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  handleSet(
    tokenId: BigNumberish,
    handle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasTokenControl(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasTokenControlAccount(
    tokenId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    hub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintFor(
    to: string,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  opinionAboutSoul(
    tokenId: BigNumberish,
    domain: string,
    score: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  opinionAboutToken(
    contractAddr: string,
    tokenId: BigNumberish,
    domain: string,
    score: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  relAdd(
    key: string,
    toSBT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relGet(key: string, overrides?: CallOverrides): Promise<BigNumber>;

  relGetAll(key: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  relGetAllOf(
    fromSBT: BigNumberish,
    key: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  relGetIndex(
    key: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  relGetIndexOf(
    fromSBT: BigNumberish,
    key: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  relGetOf(
    fromSBT: BigNumberish,
    key: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  relRemove(
    key: string,
    toSBT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relSet(
    key: string,
    toSBT: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHub(
    hubAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByAddress(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenOwnerAdd(
    owner: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenOwnerRemove(
    owner: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  types(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  update(
    tokenId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountURI(account: string, overrides?: CallOverrides): Promise<string>;

    announcement(
      tokenId: BigNumberish,
      uri_: string,
      context: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

    getHub(overrides?: CallOverrides): Promise<string>;

    getOpinion(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionMine(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionOnSoul(
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastRepForDomain(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepoAddr(overrides?: CallOverrides): Promise<string>;

    handleFind(handle: string, overrides?: CallOverrides): Promise<BigNumber>;

    handleGet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    handleSet(
      tokenId: BigNumberish,
      handle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasTokenControl(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasTokenControlAccount(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(hub: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(tokenURI: string, overrides?: CallOverrides): Promise<BigNumber>;

    mintFor(
      to: string,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    opinionAboutSoul(
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    opinionAboutToken(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    relAdd(
      key: string,
      toSBT: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    relGet(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    relGetAll(key: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    relGetAllOf(
      fromSBT: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    relGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relGetIndexOf(
      fromSBT: BigNumberish,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relGetOf(
      fromSBT: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relRemove(
      key: string,
      toSBT: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    relSet(
      key: string,
      toSBT: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setHub(hubAddr: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwnerAdd(
      owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOwnerRemove(
      owner: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    types(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    update(
      tokenId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Announcement(address,uint256,string,string)"(
      account?: string | null,
      tokenId?: null,
      uri?: null,
      context?: null
    ): AnnouncementEventFilter;
    Announcement(
      account?: string | null,
      tokenId?: null,
      uri?: null,
      context?: null
    ): AnnouncementEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OpinionChange(uint256,address,uint256,string,int256,int256)"(
      sbt?: null,
      contractAddr?: string | null,
      tokenId?: BigNumberish | null,
      domain?: null,
      oldValue?: null,
      newValue?: null
    ): OpinionChangeEventFilter;
    OpinionChange(
      sbt?: null,
      contractAddr?: string | null,
      tokenId?: BigNumberish | null,
      domain?: null,
      oldValue?: null,
      newValue?: null
    ): OpinionChangeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RelAdd(uint256,string,uint256)"(
      fromSBT?: null,
      key?: null,
      toSBT?: null
    ): RelAddEventFilter;
    RelAdd(fromSBT?: null, key?: null, toSBT?: null): RelAddEventFilter;

    "RelRemoved(uint256,string,uint256)"(
      fromSBT?: null,
      key?: null,
      toSBT?: null
    ): RelRemovedEventFilter;
    RelRemoved(fromSBT?: null, key?: null, toSBT?: null): RelRemovedEventFilter;

    "RelSet(uint256,string,uint256)"(
      fromSBT?: null,
      key?: null,
      toSBT?: null
    ): RelSetEventFilter;
    RelSet(fromSBT?: null, key?: null, toSBT?: null): RelSetEventFilter;

    "ReputationChange(uint256,string,bool,uint256)"(
      id?: BigNumberish | null,
      domain?: null,
      rating?: null,
      score?: null
    ): ReputationChangeEventFilter;
    ReputationChange(
      id?: BigNumberish | null,
      domain?: null,
      rating?: null,
      score?: null
    ): ReputationChangeEventFilter;

    "SoulHandle(uint256,string)"(
      tokenId?: BigNumberish | null,
      handle?: null
    ): SoulHandleEventFilter;
    SoulHandle(
      tokenId?: BigNumberish | null,
      handle?: null
    ): SoulHandleEventFilter;

    "SoulType(uint256,string)"(
      tokenId?: BigNumberish | null,
      soulType?: null
    ): SoulTypeEventFilter;
    SoulType(
      tokenId?: BigNumberish | null,
      soulType?: null
    ): SoulTypeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    accountURI(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    announcement(
      tokenId: BigNumberish,
      uri_: string,
      context: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

    getHub(overrides?: CallOverrides): Promise<BigNumber>;

    getOpinion(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionMine(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionOnSoul(
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastRepForDomain(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRepoAddr(overrides?: CallOverrides): Promise<BigNumber>;

    handleFind(handle: string, overrides?: CallOverrides): Promise<BigNumber>;

    handleGet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleSet(
      tokenId: BigNumberish,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasTokenControl(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasTokenControlAccount(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintFor(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    opinionAboutSoul(
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    opinionAboutToken(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    relAdd(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relGet(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    relGetAll(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    relGetAllOf(
      fromSBT: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relGetIndexOf(
      fromSBT: BigNumberish,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relGetOf(
      fromSBT: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relRemove(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relSet(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHub(
      hubAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwnerAdd(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenOwnerRemove(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    types(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    update(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountURI(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    announcement(
      tokenId: BigNumberish,
      uri_: string,
      context: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentSBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOpinion(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpinionMine(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpinionOnSoul(
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastRepForDomain(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRepoAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handleFind(
      handle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleGet(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleSet(
      tokenId: BigNumberish,
      handle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasTokenControl(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasTokenControlAccount(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      hub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintFor(
      to: string,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    opinionAboutSoul(
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    opinionAboutToken(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      score: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relAdd(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relGet(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relGetAll(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relGetAllOf(
      fromSBT: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relGetIndex(
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relGetIndexOf(
      fromSBT: BigNumberish,
      key: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relGetOf(
      fromSBT: BigNumberish,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relRemove(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relSet(
      key: string,
      toSBT: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHub(
      hubAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOwnerAdd(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenOwnerRemove(
      owner: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    types(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      tokenId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
