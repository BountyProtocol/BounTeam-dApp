/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IERC1155RolesTrackerInterface extends utils.Interface {
  contractName: "IERC1155RolesTracker";
  functions: {
    "roleExist(string)": FunctionFragment;
    "roleHas(address,string)": FunctionFragment;
    "roleHasByToken(uint256,string)": FunctionFragment;
    "roleURI(string)": FunctionFragment;
    "uniqueRoleMembers(string)": FunctionFragment;
    "uniqueRoleMembersCount(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "roleExist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "roleHas",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleHasByToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "roleURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "uniqueRoleMembers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueRoleMembersCount",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "roleExist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleHasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniqueRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueRoleMembersCount",
    data: BytesLike
  ): Result;

  events: {
    "RoleCreated(uint256,string)": EventFragment;
    "RoleURIChange(string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleURIChange"): EventFragment;
}

export type RoleCreatedEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; role: string }
>;

export type RoleCreatedEventFilter = TypedEventFilter<RoleCreatedEvent>;

export type RoleURIChangeEvent = TypedEvent<
  [string, string],
  { value: string; role: string }
>;

export type RoleURIChangeEventFilter = TypedEventFilter<RoleURIChangeEvent>;

export interface IERC1155RolesTracker extends BaseContract {
  contractName: "IERC1155RolesTracker";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC1155RolesTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    roleExist(role: string, overrides?: CallOverrides): Promise<[boolean]>;

    roleHas(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleHasByToken(
      soulToken: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleURI(role: string, overrides?: CallOverrides): Promise<[string]>;

    uniqueRoleMembers(
      role: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    uniqueRoleMembersCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  roleExist(role: string, overrides?: CallOverrides): Promise<boolean>;

  roleHas(
    account: string,
    role: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleHasByToken(
    soulToken: BigNumberish,
    role: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleURI(role: string, overrides?: CallOverrides): Promise<string>;

  uniqueRoleMembers(
    role: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  uniqueRoleMembersCount(
    role: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    roleExist(role: string, overrides?: CallOverrides): Promise<boolean>;

    roleHas(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleHasByToken(
      soulToken: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleURI(role: string, overrides?: CallOverrides): Promise<string>;

    uniqueRoleMembers(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    uniqueRoleMembersCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "RoleCreated(uint256,string)"(
      id?: BigNumberish | null,
      role?: null
    ): RoleCreatedEventFilter;
    RoleCreated(id?: BigNumberish | null, role?: null): RoleCreatedEventFilter;

    "RoleURIChange(string,string)"(
      value?: null,
      role?: null
    ): RoleURIChangeEventFilter;
    RoleURIChange(value?: null, role?: null): RoleURIChangeEventFilter;
  };

  estimateGas: {
    roleExist(role: string, overrides?: CallOverrides): Promise<BigNumber>;

    roleHas(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleHasByToken(
      soulToken: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleURI(role: string, overrides?: CallOverrides): Promise<BigNumber>;

    uniqueRoleMembers(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueRoleMembersCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    roleExist(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleHas(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleHasByToken(
      soulToken: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleURI(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueRoleMembers(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueRoleMembersCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
