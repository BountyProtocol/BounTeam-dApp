/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IAssocRepoInterface extends utils.Interface {
  contractName: "IAssocRepo";
  functions: {
    "get(string)": FunctionFragment;
    "getOf(address,string)": FunctionFragment;
    "set(string,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "get", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOf",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "set", values: [string, string]): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;

  events: {
    "Assoc(address,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Assoc"): EventFragment;
}

export type AssocEvent = TypedEvent<
  [string, string, string],
  { originContract: string; key: string; destinationContract: string }
>;

export type AssocEventFilter = TypedEventFilter<AssocEvent>;

export interface IAssocRepo extends BaseContract {
  contractName: "IAssocRepo";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAssocRepoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get(key: string, overrides?: CallOverrides): Promise<[string]>;

    getOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    set(
      key: string,
      destinationContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  get(key: string, overrides?: CallOverrides): Promise<string>;

  getOf(
    originContract: string,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  set(
    key: string,
    destinationContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    get(key: string, overrides?: CallOverrides): Promise<string>;

    getOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    set(
      key: string,
      destinationContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Assoc(address,string,address)"(
      originContract?: null,
      key?: null,
      destinationContract?: null
    ): AssocEventFilter;
    Assoc(
      originContract?: null,
      key?: null,
      destinationContract?: null
    ): AssocEventFilter;
  };

  estimateGas: {
    get(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    getOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      key: string,
      destinationContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get(key: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOf(
      originContract: string,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      key: string,
      destinationContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
