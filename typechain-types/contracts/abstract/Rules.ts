/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DataTypes {
  export type ConfirmationStruct = {
    ruling: PromiseOrValue<string>;
    evidence: PromiseOrValue<boolean>;
    witness: PromiseOrValue<BigNumberish>;
  };

  export type ConfirmationStructOutput = [string, boolean, BigNumber] & {
    ruling: string;
    evidence: boolean;
    witness: BigNumber;
  };

  export type RepChangeStruct = {
    domain: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    disabled: PromiseOrValue<boolean>;
  };

  export type RepChangeStructOutput = [string, BigNumber, boolean] & {
    domain: string;
    value: BigNumber;
    disabled: boolean;
  };

  export type RuleStruct = {
    about: PromiseOrValue<BytesLike>;
    affected: PromiseOrValue<string>;
    negation: PromiseOrValue<boolean>;
    uri: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
  };

  export type RuleStructOutput = [string, string, boolean, string, boolean] & {
    about: string;
    affected: string;
    negation: boolean;
    uri: string;
    disabled: boolean;
  };
}

export interface RulesInterface extends utils.Interface {
  functions: {
    "confirmationGet(uint256)": FunctionFragment;
    "effectsGet(uint256)": FunctionFragment;
    "ruleAdd((bytes32,string,bool,string,bool),(string,bool,uint256),(string,int256,bool)[])": FunctionFragment;
    "ruleDisable(uint256,bool)": FunctionFragment;
    "ruleGet(uint256)": FunctionFragment;
    "ruleUpdate(uint256,(bytes32,string,bool,string,bool),(string,int256,bool)[])": FunctionFragment;
    "ruleUpdateConfirmation(uint256,(string,bool,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confirmationGet"
      | "effectsGet"
      | "ruleAdd"
      | "ruleDisable"
      | "ruleGet"
      | "ruleUpdate"
      | "ruleUpdateConfirmation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confirmationGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "effectsGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleAdd",
    values: [
      DataTypes.RuleStruct,
      DataTypes.ConfirmationStruct,
      DataTypes.RepChangeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleDisable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleUpdate",
    values: [
      PromiseOrValue<BigNumberish>,
      DataTypes.RuleStruct,
      DataTypes.RepChangeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleUpdateConfirmation",
    values: [PromiseOrValue<BigNumberish>, DataTypes.ConfirmationStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmationGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "effectsGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ruleAdd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ruleDisable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ruleGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ruleUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ruleUpdateConfirmation",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256,bytes32)": EventFragment;
    "Confirmation(uint256,string,bool,uint256)": EventFragment;
    "Rule(uint256,bytes32,string,string,bool)": EventFragment;
    "RuleDisabled(uint256,bool)": EventFragment;
    "RuleEffect(uint256,string,int256)": EventFragment;
    "RuleRemoved(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleEffect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleRemoved"): EventFragment;
}

export interface ClaimEventObject {
  id: BigNumber;
  claimId: string;
}
export type ClaimEvent = TypedEvent<[BigNumber, string], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ConfirmationEventObject {
  id: BigNumber;
  ruling: string;
  evidence: boolean;
  witness: BigNumber;
}
export type ConfirmationEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  ConfirmationEventObject
>;

export type ConfirmationEventFilter = TypedEventFilter<ConfirmationEvent>;

export interface RuleEventObject {
  id: BigNumber;
  about: string;
  affected: string;
  uri: string;
  negation: boolean;
}
export type RuleEvent = TypedEvent<
  [BigNumber, string, string, string, boolean],
  RuleEventObject
>;

export type RuleEventFilter = TypedEventFilter<RuleEvent>;

export interface RuleDisabledEventObject {
  id: BigNumber;
  disabled: boolean;
}
export type RuleDisabledEvent = TypedEvent<
  [BigNumber, boolean],
  RuleDisabledEventObject
>;

export type RuleDisabledEventFilter = TypedEventFilter<RuleDisabledEvent>;

export interface RuleEffectEventObject {
  id: BigNumber;
  domain: string;
  value: BigNumber;
}
export type RuleEffectEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RuleEffectEventObject
>;

export type RuleEffectEventFilter = TypedEventFilter<RuleEffectEvent>;

export interface RuleRemovedEventObject {
  id: BigNumber;
}
export type RuleRemovedEvent = TypedEvent<[BigNumber], RuleRemovedEventObject>;

export type RuleRemovedEventFilter = TypedEventFilter<RuleRemovedEvent>;

export interface Rules extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RulesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmationGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ConfirmationStructOutput]>;

    effectsGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RepChangeStructOutput[]]>;

    ruleAdd(
      rule: DataTypes.RuleStruct,
      confirmation: DataTypes.ConfirmationStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ruleDisable(
      id: PromiseOrValue<BigNumberish>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ruleGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RuleStructOutput]>;

    ruleUpdate(
      id: PromiseOrValue<BigNumberish>,
      rule: DataTypes.RuleStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ruleUpdateConfirmation(
      id: PromiseOrValue<BigNumberish>,
      confirmation: DataTypes.ConfirmationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  confirmationGet(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ConfirmationStructOutput>;

  effectsGet(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RepChangeStructOutput[]>;

  ruleAdd(
    rule: DataTypes.RuleStruct,
    confirmation: DataTypes.ConfirmationStruct,
    effects: DataTypes.RepChangeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ruleDisable(
    id: PromiseOrValue<BigNumberish>,
    disabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ruleGet(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RuleStructOutput>;

  ruleUpdate(
    id: PromiseOrValue<BigNumberish>,
    rule: DataTypes.RuleStruct,
    effects: DataTypes.RepChangeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ruleUpdateConfirmation(
    id: PromiseOrValue<BigNumberish>,
    confirmation: DataTypes.ConfirmationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    confirmationGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ConfirmationStructOutput>;

    effectsGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RepChangeStructOutput[]>;

    ruleAdd(
      rule: DataTypes.RuleStruct,
      confirmation: DataTypes.ConfirmationStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleDisable(
      id: PromiseOrValue<BigNumberish>,
      disabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    ruleGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RuleStructOutput>;

    ruleUpdate(
      id: PromiseOrValue<BigNumberish>,
      rule: DataTypes.RuleStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    ruleUpdateConfirmation(
      id: PromiseOrValue<BigNumberish>,
      confirmation: DataTypes.ConfirmationStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claim(uint256,bytes32)"(
      id?: PromiseOrValue<BigNumberish> | null,
      claimId?: null
    ): ClaimEventFilter;
    Claim(
      id?: PromiseOrValue<BigNumberish> | null,
      claimId?: null
    ): ClaimEventFilter;

    "Confirmation(uint256,string,bool,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      ruling?: null,
      evidence?: null,
      witness?: null
    ): ConfirmationEventFilter;
    Confirmation(
      id?: PromiseOrValue<BigNumberish> | null,
      ruling?: null,
      evidence?: null,
      witness?: null
    ): ConfirmationEventFilter;

    "Rule(uint256,bytes32,string,string,bool)"(
      id?: PromiseOrValue<BigNumberish> | null,
      about?: null,
      affected?: null,
      uri?: null,
      negation?: null
    ): RuleEventFilter;
    Rule(
      id?: PromiseOrValue<BigNumberish> | null,
      about?: null,
      affected?: null,
      uri?: null,
      negation?: null
    ): RuleEventFilter;

    "RuleDisabled(uint256,bool)"(
      id?: null,
      disabled?: null
    ): RuleDisabledEventFilter;
    RuleDisabled(id?: null, disabled?: null): RuleDisabledEventFilter;

    "RuleEffect(uint256,string,int256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      domain?: null,
      value?: null
    ): RuleEffectEventFilter;
    RuleEffect(
      id?: PromiseOrValue<BigNumberish> | null,
      domain?: null,
      value?: null
    ): RuleEffectEventFilter;

    "RuleRemoved(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): RuleRemovedEventFilter;
    RuleRemoved(
      id?: PromiseOrValue<BigNumberish> | null
    ): RuleRemovedEventFilter;
  };

  estimateGas: {
    confirmationGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectsGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleAdd(
      rule: DataTypes.RuleStruct,
      confirmation: DataTypes.ConfirmationStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ruleDisable(
      id: PromiseOrValue<BigNumberish>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ruleGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleUpdate(
      id: PromiseOrValue<BigNumberish>,
      rule: DataTypes.RuleStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ruleUpdateConfirmation(
      id: PromiseOrValue<BigNumberish>,
      confirmation: DataTypes.ConfirmationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmationGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectsGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleAdd(
      rule: DataTypes.RuleStruct,
      confirmation: DataTypes.ConfirmationStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ruleDisable(
      id: PromiseOrValue<BigNumberish>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ruleGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleUpdate(
      id: PromiseOrValue<BigNumberish>,
      rule: DataTypes.RuleStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ruleUpdateConfirmation(
      id: PromiseOrValue<BigNumberish>,
      confirmation: DataTypes.ConfirmationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
