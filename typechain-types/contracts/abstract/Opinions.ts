/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OpinionsInterface extends utils.Interface {
  functions: {
    "getOpinion(uint256,address,uint256,string)": FunctionFragment;
    "getOpinionMine(address,uint256,string)": FunctionFragment;
    "getOpinionOnSoul(uint256,string)": FunctionFragment;
    "getPastRepForDomain(uint256,address,uint256,string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getOpinion"
      | "getOpinionMine"
      | "getOpinionOnSoul"
      | "getPastRepForDomain"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOpinion",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpinionMine",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpinionOnSoul",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastRepForDomain",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getOpinion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOpinionMine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpinionOnSoul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastRepForDomain",
    data: BytesLike
  ): Result;

  events: {
    "OpinionChange(uint256,address,uint256,string,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OpinionChange"): EventFragment;
}

export interface OpinionChangeEventObject {
  sbt: BigNumber;
  contractAddr: string;
  tokenId: BigNumber;
  domain: string;
  oldValue: BigNumber;
  newValue: BigNumber;
}
export type OpinionChangeEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber],
  OpinionChangeEventObject
>;

export type OpinionChangeEventFilter = TypedEventFilter<OpinionChangeEvent>;

export interface Opinions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpinionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOpinion(
      sbt: PromiseOrValue<BigNumberish>,
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpinionMine(
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpinionOnSoul(
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastRepForDomain(
      sbt: PromiseOrValue<BigNumberish>,
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getOpinion(
    sbt: PromiseOrValue<BigNumberish>,
    contractAddr: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    domain: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpinionMine(
    contractAddr: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    domain: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpinionOnSoul(
    tokenId: PromiseOrValue<BigNumberish>,
    domain: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastRepForDomain(
    sbt: PromiseOrValue<BigNumberish>,
    contractAddr: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    domain: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getOpinion(
      sbt: PromiseOrValue<BigNumberish>,
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionMine(
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionOnSoul(
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastRepForDomain(
      sbt: PromiseOrValue<BigNumberish>,
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OpinionChange(uint256,address,uint256,string,int256,int256)"(
      sbt?: null,
      contractAddr?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      domain?: null,
      oldValue?: null,
      newValue?: null
    ): OpinionChangeEventFilter;
    OpinionChange(
      sbt?: null,
      contractAddr?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      domain?: null,
      oldValue?: null,
      newValue?: null
    ): OpinionChangeEventFilter;
  };

  estimateGas: {
    getOpinion(
      sbt: PromiseOrValue<BigNumberish>,
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionMine(
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionOnSoul(
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastRepForDomain(
      sbt: PromiseOrValue<BigNumberish>,
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOpinion(
      sbt: PromiseOrValue<BigNumberish>,
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpinionMine(
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpinionOnSoul(
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastRepForDomain(
      sbt: PromiseOrValue<BigNumberish>,
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
