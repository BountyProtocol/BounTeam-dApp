/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace DataTypes {
  export type RuleRefStruct = {
    game: PromiseOrValue<string>;
    ruleId: PromiseOrValue<BigNumberish>;
  };

  export type RuleRefStructOutput = [string, BigNumber] & {
    game: string;
    ruleId: BigNumber;
  };

  export type InputRoleStruct = {
    account: PromiseOrValue<string>;
    role: PromiseOrValue<string>;
  };

  export type InputRoleStructOutput = [string, string] & {
    account: string;
    role: string;
  };

  export type RuleStruct = {
    about: PromiseOrValue<BytesLike>;
    affected: PromiseOrValue<string>;
    negation: PromiseOrValue<boolean>;
    uri: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
  };

  export type RuleStructOutput = [string, string, boolean, string, boolean] & {
    about: string;
    affected: string;
    negation: boolean;
    uri: string;
    disabled: boolean;
  };

  export type ConfirmationStruct = {
    ruling: PromiseOrValue<string>;
    evidence: PromiseOrValue<boolean>;
    witness: PromiseOrValue<BigNumberish>;
  };

  export type ConfirmationStructOutput = [string, boolean, BigNumber] & {
    ruling: string;
    evidence: boolean;
    witness: BigNumber;
  };

  export type RepChangeStruct = {
    domain: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    disabled: PromiseOrValue<boolean>;
  };

  export type RepChangeStructOutput = [string, BigNumber, boolean] & {
    domain: string;
    value: BigNumber;
    disabled: boolean;
  };

  export type InputDecisionStruct = {
    ruleId: PromiseOrValue<BigNumberish>;
    decision: PromiseOrValue<boolean>;
  };

  export type InputDecisionStructOutput = [BigNumber, boolean] & {
    ruleId: BigNumber;
    decision: boolean;
  };
}

export interface ClaimMockInterface extends utils.Interface {
  functions: {
    "GUIDHas(address,bytes32)": FunctionFragment;
    "GUIDHasByToken(uint256,bytes32)": FunctionFragment;
    "GUIDURI(bytes32)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "balanceOfToken(uint256,uint256)": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnBatch(address,uint256[],uint256[])": FunctionFragment;
    "confGet(string)": FunctionFragment;
    "confSet(string,string)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "decision(uint256)": FunctionFragment;
    "getCurrentSBT()": FunctionFragment;
    "getExtTokenId(address)": FunctionFragment;
    "getHub()": FunctionFragment;
    "getRepoAddr()": FunctionFragment;
    "getTargetContract()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initialize(string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(address,uint256,uint256,bytes)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[],bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "nominate(uint256,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "post(string,uint256,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roleAssign(address,string)": FunctionFragment;
    "roleAssignToToken(uint256,string)": FunctionFragment;
    "roleChange(address,string,string)": FunctionFragment;
    "roleCreate(string)": FunctionFragment;
    "roleExist(string)": FunctionFragment;
    "roleHas(address,string)": FunctionFragment;
    "roleHasByToken(uint256,string)": FunctionFragment;
    "roleRemove(address,string)": FunctionFragment;
    "roleRemoveFromToken(uint256,string)": FunctionFragment;
    "roleToId(string)": FunctionFragment;
    "roleURI(string)": FunctionFragment;
    "rolesHas(address,string[])": FunctionFragment;
    "ruleGet(uint256)": FunctionFragment;
    "ruleGetConfirmation(uint256)": FunctionFragment;
    "ruleGetEffects(uint256)": FunctionFragment;
    "ruleRefAdd(address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setHub(address)": FunctionFragment;
    "setParentCTX(address)": FunctionFragment;
    "setRoleURI(string,string)": FunctionFragment;
    "stage()": FunctionFragment;
    "stageCancel(string)": FunctionFragment;
    "stageDecision((uint256,bool)[],string)": FunctionFragment;
    "stageFile()": FunctionFragment;
    "stageWaitForDecision()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniqueMembers(uint256)": FunctionFragment;
    "uniqueMembersCount(uint256)": FunctionFragment;
    "uniqueRoleMembers(string)": FunctionFragment;
    "uniqueRoleMembersCount(string)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GUIDHas"
      | "GUIDHasByToken"
      | "GUIDURI"
      | "balanceOf"
      | "balanceOfBatch"
      | "balanceOfToken"
      | "burn"
      | "burnBatch"
      | "confGet"
      | "confSet"
      | "contractURI"
      | "decision"
      | "getCurrentSBT"
      | "getExtTokenId"
      | "getHub"
      | "getRepoAddr"
      | "getTargetContract"
      | "initialize(address)"
      | "initialize(string)"
      | "isApprovedForAll"
      | "mint"
      | "mintBatch"
      | "name"
      | "nominate"
      | "owner"
      | "post"
      | "renounceOwnership"
      | "roleAssign"
      | "roleAssignToToken"
      | "roleChange"
      | "roleCreate"
      | "roleExist"
      | "roleHas"
      | "roleHasByToken"
      | "roleRemove"
      | "roleRemoveFromToken"
      | "roleToId"
      | "roleURI"
      | "rolesHas"
      | "ruleGet"
      | "ruleGetConfirmation"
      | "ruleGetEffects"
      | "ruleRefAdd"
      | "setApprovalForAll"
      | "setContractURI"
      | "setHub"
      | "setParentCTX"
      | "setRoleURI"
      | "stage"
      | "stageCancel"
      | "stageDecision"
      | "stageFile"
      | "stageWaitForDecision"
      | "supportsInterface"
      | "symbol"
      | "transferOwnership"
      | "uniqueMembers"
      | "uniqueMembersCount"
      | "uniqueRoleMembers"
      | "uniqueRoleMembersCount"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GUIDHas",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "GUIDHasByToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "GUIDURI",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "confGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "confSet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decision",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSBT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExtTokenId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getHub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRepoAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nominate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleAssign",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleAssignToToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleChange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "roleCreate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleExist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleHas",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleHasByToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleRemoveFromToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleToId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesHas",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleGetConfirmation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleGetEffects",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleRefAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHub",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setParentCTX",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleURI",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "stage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stageCancel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stageDecision",
    values: [DataTypes.InputDecisionStruct[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "stageFile", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stageWaitForDecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueMembers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueMembersCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueRoleMembers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueRoleMembersCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "GUIDHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GUIDHasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GUIDURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decision", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRepoAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nominate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleAssign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleAssignToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleChange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleCreate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleExist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleHasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleRemove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleRemoveFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleToId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rolesHas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ruleGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ruleGetConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleGetEffects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ruleRefAdd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParentCTX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoleURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stageCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stageDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stageFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stageWaitForDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueMembersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueRoleMembersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Cancelled(string,address)": EventFragment;
    "Executed(address)": EventFragment;
    "GUIDCreated(uint256,bytes32)": EventFragment;
    "GUIDURIChange(string,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Nominate(address,uint256,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Post(address,uint256,string,string)": EventFragment;
    "RoleCreated(uint256,string)": EventFragment;
    "RoleURIChange(string,string)": EventFragment;
    "RuleAdded(address,uint256)": EventFragment;
    "RuleConfirmed(uint256)": EventFragment;
    "Stage(uint8)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferBatchByToken(address,uint256,uint256,uint256[],uint256[])": EventFragment;
    "TransferByToken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Verdict(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GUIDCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GUIDURIChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Nominate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Post"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleURIChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatchByToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Verdict"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CancelledEventObject {
  uri: string;
  account: string;
}
export type CancelledEvent = TypedEvent<[string, string], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ExecutedEventObject {
  account: string;
}
export type ExecutedEvent = TypedEvent<[string], ExecutedEventObject>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface GUIDCreatedEventObject {
  id: BigNumber;
  guid: string;
}
export type GUIDCreatedEvent = TypedEvent<
  [BigNumber, string],
  GUIDCreatedEventObject
>;

export type GUIDCreatedEventFilter = TypedEventFilter<GUIDCreatedEvent>;

export interface GUIDURIChangeEventObject {
  value: string;
  guid: string;
}
export type GUIDURIChangeEvent = TypedEvent<
  [string, string],
  GUIDURIChangeEventObject
>;

export type GUIDURIChangeEventFilter = TypedEventFilter<GUIDURIChangeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NominateEventObject {
  account: string;
  id: BigNumber;
  uri: string;
}
export type NominateEvent = TypedEvent<
  [string, BigNumber, string],
  NominateEventObject
>;

export type NominateEventFilter = TypedEventFilter<NominateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PostEventObject {
  account: string;
  tokenId: BigNumber;
  entRole: string;
  uri: string;
}
export type PostEvent = TypedEvent<
  [string, BigNumber, string, string],
  PostEventObject
>;

export type PostEventFilter = TypedEventFilter<PostEvent>;

export interface RoleCreatedEventObject {
  id: BigNumber;
  role: string;
}
export type RoleCreatedEvent = TypedEvent<
  [BigNumber, string],
  RoleCreatedEventObject
>;

export type RoleCreatedEventFilter = TypedEventFilter<RoleCreatedEvent>;

export interface RoleURIChangeEventObject {
  value: string;
  role: string;
}
export type RoleURIChangeEvent = TypedEvent<
  [string, string],
  RoleURIChangeEventObject
>;

export type RoleURIChangeEventFilter = TypedEventFilter<RoleURIChangeEvent>;

export interface RuleAddedEventObject {
  game: string;
  ruleId: BigNumber;
}
export type RuleAddedEvent = TypedEvent<
  [string, BigNumber],
  RuleAddedEventObject
>;

export type RuleAddedEventFilter = TypedEventFilter<RuleAddedEvent>;

export interface RuleConfirmedEventObject {
  ruleId: BigNumber;
}
export type RuleConfirmedEvent = TypedEvent<
  [BigNumber],
  RuleConfirmedEventObject
>;

export type RuleConfirmedEventFilter = TypedEventFilter<RuleConfirmedEvent>;

export interface StageEventObject {
  stage: number;
}
export type StageEvent = TypedEvent<[number], StageEventObject>;

export type StageEventFilter = TypedEventFilter<StageEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferBatchByTokenEventObject {
  operator: string;
  fromOwnerToken: BigNumber;
  toOwnerToken: BigNumber;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchByTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber[]],
  TransferBatchByTokenEventObject
>;

export type TransferBatchByTokenEventFilter =
  TypedEventFilter<TransferBatchByTokenEvent>;

export interface TransferByTokenEventObject {
  operator: string;
  fromOwnerToken: BigNumber;
  toOwnerToken: BigNumber;
  id: BigNumber;
  value: BigNumber;
}
export type TransferByTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  TransferByTokenEventObject
>;

export type TransferByTokenEventFilter = TypedEventFilter<TransferByTokenEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface VerdictEventObject {
  uri: string;
  account: string;
}
export type VerdictEvent = TypedEvent<[string, string], VerdictEventObject>;

export type VerdictEventFilter = TypedEventFilter<VerdictEvent>;

export interface ClaimMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClaimMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GUIDHas(
      account: PromiseOrValue<string>,
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    GUIDHasByToken(
      soulToken: PromiseOrValue<BigNumberish>,
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    GUIDURI(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    balanceOfToken(
      sbt: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      owner: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnBatch(
      owner: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    confSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    decision(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCurrentSBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExtTokenId(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHub(overrides?: CallOverrides): Promise<[string]>;

    getRepoAddr(overrides?: CallOverrides): Promise<[string]>;

    getTargetContract(overrides?: CallOverrides): Promise<[string]>;

    "initialize(address)"(
      sbtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initialize(string)"(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintBatch(
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nominate(
      soulToken: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleAssign(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleAssignToToken(
      ownerToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleChange(
      account: PromiseOrValue<string>,
      roleOld: PromiseOrValue<string>,
      roleNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleCreate(
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleExist(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleHas(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleHasByToken(
      soulToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleRemove(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleRemoveFromToken(
      sbt: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleToId(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    roleURI(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rolesHas(
      account: PromiseOrValue<string>,
      roles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ruleGet(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RuleStructOutput]>;

    ruleGetConfirmation(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ConfirmationStructOutput]>;

    ruleGetEffects(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RepChangeStructOutput[]]>;

    ruleRefAdd(
      game_: PromiseOrValue<string>,
      ruleId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      contract_uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHub(
      hubAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParentCTX(
      container: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoleURI(
      role: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stage(overrides?: CallOverrides): Promise<[number]>;

    stageCancel(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stageDecision(
      verdict: DataTypes.InputDecisionStruct[],
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stageFile(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stageWaitForDecision(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniqueMembers(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    uniqueMembersCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uniqueRoleMembers(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    uniqueRoleMembersCount(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uri(
      token_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  GUIDHas(
    account: PromiseOrValue<string>,
    guid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  GUIDHasByToken(
    soulToken: PromiseOrValue<BigNumberish>,
    guid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  GUIDURI(
    guid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  balanceOfToken(
    sbt: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    owner: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnBatch(
    owner: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  confSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  decision(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

  getExtTokenId(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHub(overrides?: CallOverrides): Promise<string>;

  getRepoAddr(overrides?: CallOverrides): Promise<string>;

  getTargetContract(overrides?: CallOverrides): Promise<string>;

  "initialize(address)"(
    sbtAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initialize(string)"(
    name_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintBatch(
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nominate(
    soulToken: PromiseOrValue<BigNumberish>,
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  post(
    entRole: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleAssign(
    account: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleAssignToToken(
    ownerToken: PromiseOrValue<BigNumberish>,
    role: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleChange(
    account: PromiseOrValue<string>,
    roleOld: PromiseOrValue<string>,
    roleNew: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleCreate(
    role: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleExist(
    role: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleHas(
    account: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleHasByToken(
    soulToken: PromiseOrValue<BigNumberish>,
    role: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleRemove(
    account: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleRemoveFromToken(
    sbt: PromiseOrValue<BigNumberish>,
    role: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleToId(
    role: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  roleURI(
    role: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  rolesHas(
    account: PromiseOrValue<string>,
    roles: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  ruleGet(
    ruleRefId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RuleStructOutput>;

  ruleGetConfirmation(
    ruleRefId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ConfirmationStructOutput>;

  ruleGetEffects(
    ruleRefId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RepChangeStructOutput[]>;

  ruleRefAdd(
    game_: PromiseOrValue<string>,
    ruleId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    contract_uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHub(
    hubAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParentCTX(
    container: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoleURI(
    role: PromiseOrValue<string>,
    _tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stage(overrides?: CallOverrides): Promise<number>;

  stageCancel(
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stageDecision(
    verdict: DataTypes.InputDecisionStruct[],
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stageFile(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stageWaitForDecision(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniqueMembers(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  uniqueMembersCount(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uniqueRoleMembers(
    role: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  uniqueRoleMembersCount(
    role: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uri(
    token_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    GUIDHas(
      account: PromiseOrValue<string>,
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    GUIDHasByToken(
      soulToken: PromiseOrValue<BigNumberish>,
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    GUIDURI(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    balanceOfToken(
      sbt: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      owner: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      owner: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    confGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    confSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    decision(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

    getExtTokenId(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHub(overrides?: CallOverrides): Promise<string>;

    getRepoAddr(overrides?: CallOverrides): Promise<string>;

    getTargetContract(overrides?: CallOverrides): Promise<string>;

    "initialize(address)"(
      sbtAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string)"(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nominate(
      soulToken: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roleAssign(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleAssignToToken(
      ownerToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleChange(
      account: PromiseOrValue<string>,
      roleOld: PromiseOrValue<string>,
      roleNew: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleCreate(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleExist(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleHas(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleHasByToken(
      soulToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleRemove(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleRemoveFromToken(
      sbt: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleToId(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleURI(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    rolesHas(
      account: PromiseOrValue<string>,
      roles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    ruleGet(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RuleStructOutput>;

    ruleGetConfirmation(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ConfirmationStructOutput>;

    ruleGetEffects(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RepChangeStructOutput[]>;

    ruleRefAdd(
      game_: PromiseOrValue<string>,
      ruleId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      contract_uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHub(
      hubAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setParentCTX(
      container: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleURI(
      role: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stage(overrides?: CallOverrides): Promise<number>;

    stageCancel(
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stageDecision(
      verdict: DataTypes.InputDecisionStruct[],
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stageFile(overrides?: CallOverrides): Promise<void>;

    stageWaitForDecision(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniqueMembers(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    uniqueMembersCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueRoleMembers(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    uniqueRoleMembersCount(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(
      token_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Cancelled(string,address)"(
      uri?: null,
      account?: null
    ): CancelledEventFilter;
    Cancelled(uri?: null, account?: null): CancelledEventFilter;

    "Executed(address)"(account?: null): ExecutedEventFilter;
    Executed(account?: null): ExecutedEventFilter;

    "GUIDCreated(uint256,bytes32)"(
      id?: PromiseOrValue<BigNumberish> | null,
      guid?: null
    ): GUIDCreatedEventFilter;
    GUIDCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      guid?: null
    ): GUIDCreatedEventFilter;

    "GUIDURIChange(string,bytes32)"(
      value?: null,
      guid?: PromiseOrValue<BytesLike> | null
    ): GUIDURIChangeEventFilter;
    GUIDURIChange(
      value?: null,
      guid?: PromiseOrValue<BytesLike> | null
    ): GUIDURIChangeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Nominate(address,uint256,string)"(
      account?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): NominateEventFilter;
    Nominate(
      account?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): NominateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Post(address,uint256,string,string)"(
      account?: PromiseOrValue<string> | null,
      tokenId?: null,
      entRole?: null,
      uri?: null
    ): PostEventFilter;
    Post(
      account?: PromiseOrValue<string> | null,
      tokenId?: null,
      entRole?: null,
      uri?: null
    ): PostEventFilter;

    "RoleCreated(uint256,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      role?: null
    ): RoleCreatedEventFilter;
    RoleCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      role?: null
    ): RoleCreatedEventFilter;

    "RoleURIChange(string,string)"(
      value?: null,
      role?: null
    ): RoleURIChangeEventFilter;
    RoleURIChange(value?: null, role?: null): RoleURIChangeEventFilter;

    "RuleAdded(address,uint256)"(
      game?: null,
      ruleId?: null
    ): RuleAddedEventFilter;
    RuleAdded(game?: null, ruleId?: null): RuleAddedEventFilter;

    "RuleConfirmed(uint256)"(ruleId?: null): RuleConfirmedEventFilter;
    RuleConfirmed(ruleId?: null): RuleConfirmedEventFilter;

    "Stage(uint8)"(stage?: null): StageEventFilter;
    Stage(stage?: null): StageEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferBatchByToken(address,uint256,uint256,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      fromOwnerToken?: PromiseOrValue<BigNumberish> | null,
      toOwnerToken?: PromiseOrValue<BigNumberish> | null,
      ids?: null,
      values?: null
    ): TransferBatchByTokenEventFilter;
    TransferBatchByToken(
      operator?: PromiseOrValue<string> | null,
      fromOwnerToken?: PromiseOrValue<BigNumberish> | null,
      toOwnerToken?: PromiseOrValue<BigNumberish> | null,
      ids?: null,
      values?: null
    ): TransferBatchByTokenEventFilter;

    "TransferByToken(address,uint256,uint256,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      fromOwnerToken?: PromiseOrValue<BigNumberish> | null,
      toOwnerToken?: PromiseOrValue<BigNumberish> | null,
      id?: null,
      value?: null
    ): TransferByTokenEventFilter;
    TransferByToken(
      operator?: PromiseOrValue<string> | null,
      fromOwnerToken?: PromiseOrValue<BigNumberish> | null,
      toOwnerToken?: PromiseOrValue<BigNumberish> | null,
      id?: null,
      value?: null
    ): TransferByTokenEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;

    "Verdict(string,address)"(uri?: null, account?: null): VerdictEventFilter;
    Verdict(uri?: null, account?: null): VerdictEventFilter;
  };

  estimateGas: {
    GUIDHas(
      account: PromiseOrValue<string>,
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GUIDHasByToken(
      soulToken: PromiseOrValue<BigNumberish>,
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GUIDURI(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfToken(
      sbt: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      owner: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnBatch(
      owner: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    decision(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

    getExtTokenId(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHub(overrides?: CallOverrides): Promise<BigNumber>;

    getRepoAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetContract(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(address)"(
      sbtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initialize(string)"(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintBatch(
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nominate(
      soulToken: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleAssign(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleAssignToToken(
      ownerToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleChange(
      account: PromiseOrValue<string>,
      roleOld: PromiseOrValue<string>,
      roleNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleCreate(
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleExist(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleHas(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleHasByToken(
      soulToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleRemove(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleRemoveFromToken(
      sbt: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleToId(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleURI(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rolesHas(
      account: PromiseOrValue<string>,
      roles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleGet(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleGetConfirmation(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleGetEffects(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleRefAdd(
      game_: PromiseOrValue<string>,
      ruleId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractURI(
      contract_uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHub(
      hubAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParentCTX(
      container: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoleURI(
      role: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stage(overrides?: CallOverrides): Promise<BigNumber>;

    stageCancel(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stageDecision(
      verdict: DataTypes.InputDecisionStruct[],
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stageFile(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stageWaitForDecision(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniqueMembers(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueMembersCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueRoleMembers(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueRoleMembersCount(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(
      token_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GUIDHas(
      account: PromiseOrValue<string>,
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GUIDHasByToken(
      soulToken: PromiseOrValue<BigNumberish>,
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GUIDURI(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfToken(
      sbt: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      owner: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnBatch(
      owner: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decision(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentSBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtTokenId(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRepoAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialize(address)"(
      sbtAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(string)"(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominate(
      soulToken: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleAssign(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleAssignToToken(
      ownerToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleChange(
      account: PromiseOrValue<string>,
      roleOld: PromiseOrValue<string>,
      roleNew: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleCreate(
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleExist(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleHas(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleHasByToken(
      soulToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleRemove(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleRemoveFromToken(
      sbt: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleToId(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleURI(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rolesHas(
      account: PromiseOrValue<string>,
      roles: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleGet(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleGetConfirmation(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleGetEffects(
      ruleRefId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleRefAdd(
      game_: PromiseOrValue<string>,
      ruleId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      contract_uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHub(
      hubAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParentCTX(
      container: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoleURI(
      role: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stageCancel(
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stageDecision(
      verdict: DataTypes.InputDecisionStruct[],
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stageFile(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stageWaitForDecision(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniqueMembers(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueMembersCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueRoleMembers(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueRoleMembersCount(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      token_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
