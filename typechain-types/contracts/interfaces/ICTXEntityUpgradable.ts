/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICTXEntityUpgradableInterface extends utils.Interface {
  functions: {
    "confGet(string)": FunctionFragment;
    "confSet(string,string)": FunctionFragment;
    "nominate(uint256,string)": FunctionFragment;
    "roleAssign(address,string,uint256)": FunctionFragment;
    "roleAssignToToken(uint256,string,uint256)": FunctionFragment;
    "roleChange(address,string,string,uint256)": FunctionFragment;
    "roleCreate(string)": FunctionFragment;
    "roleRemove(address,string,uint256)": FunctionFragment;
    "roleRemoveFromToken(uint256,string,uint256)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setRoleURI(string,string)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confGet"
      | "confSet"
      | "nominate"
      | "roleAssign"
      | "roleAssignToToken"
      | "roleChange"
      | "roleCreate"
      | "roleRemove"
      | "roleRemoveFromToken"
      | "setContractURI"
      | "setRoleURI"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "confSet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nominate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleAssign",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "roleAssignToToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "roleChange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "roleCreate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleRemove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "roleRemoveFromToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleURI",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "confGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nominate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleAssign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleAssignToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleChange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleCreate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleRemove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleRemoveFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoleURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "Nominate(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Nominate"): EventFragment;
}

export interface NominateEventObject {
  account: string;
  id: BigNumber;
  uri: string;
}
export type NominateEvent = TypedEvent<
  [string, BigNumber, string],
  NominateEventObject
>;

export type NominateEventFilter = TypedEventFilter<NominateEvent>;

export interface ICTXEntityUpgradable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICTXEntityUpgradableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    confSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominate(
      sbt: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleAssign(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleAssignToToken(
      toToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleChange(
      account: PromiseOrValue<string>,
      roleOld: PromiseOrValue<string>,
      roleNew: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleCreate(
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleRemove(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleRemoveFromToken(
      sbt: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      contract_uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoleURI(
      role: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      token_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  confGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  confSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominate(
    sbt: PromiseOrValue<BigNumberish>,
    uri_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleAssign(
    account: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleAssignToToken(
    toToken: PromiseOrValue<BigNumberish>,
    role: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleChange(
    account: PromiseOrValue<string>,
    roleOld: PromiseOrValue<string>,
    roleNew: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleCreate(
    role: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleRemove(
    account: PromiseOrValue<string>,
    role: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleRemoveFromToken(
    sbt: PromiseOrValue<BigNumberish>,
    role: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    contract_uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoleURI(
    role: PromiseOrValue<string>,
    _tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    token_id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    confGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    confSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nominate(
      sbt: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleAssign(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleAssignToToken(
      toToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleChange(
      account: PromiseOrValue<string>,
      roleOld: PromiseOrValue<string>,
      roleNew: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleCreate(
      role: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleRemove(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleRemoveFromToken(
      sbt: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      contract_uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleURI(
      role: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      token_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Nominate(address,uint256,string)"(
      account?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): NominateEventFilter;
    Nominate(
      account?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): NominateEventFilter;
  };

  estimateGas: {
    confGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominate(
      sbt: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleAssign(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleAssignToToken(
      toToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleChange(
      account: PromiseOrValue<string>,
      roleOld: PromiseOrValue<string>,
      roleNew: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleCreate(
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleRemove(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleRemoveFromToken(
      sbt: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractURI(
      contract_uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoleURI(
      role: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      token_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominate(
      sbt: PromiseOrValue<BigNumberish>,
      uri_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleAssign(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleAssignToToken(
      toToken: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleChange(
      account: PromiseOrValue<string>,
      roleOld: PromiseOrValue<string>,
      roleNew: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleCreate(
      role: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleRemove(
      account: PromiseOrValue<string>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleRemoveFromToken(
      sbt: PromiseOrValue<BigNumberish>,
      role: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      contract_uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoleURI(
      role: PromiseOrValue<string>,
      _tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      token_id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
