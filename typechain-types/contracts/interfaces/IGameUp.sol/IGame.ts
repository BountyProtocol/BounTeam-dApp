/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IGameInterface extends utils.Interface {
  functions: {
    "claimDisable(address)": FunctionFragment;
    "claimHas(address)": FunctionFragment;
    "initialize(string)": FunctionFragment;
    "join()": FunctionFragment;
    "leave()": FunctionFragment;
    "onClaimConfirmed(uint256,address,uint256)": FunctionFragment;
    "post(string,uint256,string)": FunctionFragment;
    "reportEvent(uint256,address,string)": FunctionFragment;
    "symbol()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimDisable"
      | "claimHas"
      | "initialize"
      | "join"
      | "leave"
      | "onClaimConfirmed"
      | "post"
      | "reportEvent"
      | "symbol"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimDisable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHas",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onClaimConfirmed",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reportEvent",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimDisable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimHas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onClaimConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;

  events: {
    "EffectsExecuted(uint256,uint256,bytes)": EventFragment;
    "EventConfirmed(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EffectsExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventConfirmed"): EventFragment;
}

export interface EffectsExecutedEventObject {
  targetTokenId: BigNumber;
  ruleId: BigNumber;
  data: string;
}
export type EffectsExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  EffectsExecutedEventObject
>;

export type EffectsExecutedEventFilter = TypedEventFilter<EffectsExecutedEvent>;

export interface EventConfirmedEventObject {
  ruleId: BigNumber;
  uri: string;
}
export type EventConfirmedEvent = TypedEvent<
  [BigNumber, string],
  EventConfirmedEventObject
>;

export type EventConfirmedEventFilter = TypedEventFilter<EventConfirmedEvent>;

export interface IGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimDisable(
      claimContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimHas(
      claimContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    join(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onClaimConfirmed(
      ruleId: PromiseOrValue<BigNumberish>,
      targetContract: PromiseOrValue<string>,
      targetTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportEvent(
      ruleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      detailsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;
  };

  claimDisable(
    claimContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimHas(
    claimContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    name_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  join(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leave(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onClaimConfirmed(
    ruleId: PromiseOrValue<BigNumberish>,
    targetContract: PromiseOrValue<string>,
    targetTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  post(
    entRole: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportEvent(
    ruleId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    detailsURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimDisable(
      claimContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimHas(
      claimContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    join(overrides?: CallOverrides): Promise<BigNumber>;

    leave(overrides?: CallOverrides): Promise<BigNumber>;

    onClaimConfirmed(
      ruleId: PromiseOrValue<BigNumberish>,
      targetContract: PromiseOrValue<string>,
      targetTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    reportEvent(
      ruleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      detailsURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EffectsExecuted(uint256,uint256,bytes)"(
      targetTokenId?: PromiseOrValue<BigNumberish> | null,
      ruleId?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): EffectsExecutedEventFilter;
    EffectsExecuted(
      targetTokenId?: PromiseOrValue<BigNumberish> | null,
      ruleId?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): EffectsExecutedEventFilter;

    "EventConfirmed(uint256,string)"(
      ruleId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): EventConfirmedEventFilter;
    EventConfirmed(
      ruleId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): EventConfirmedEventFilter;
  };

  estimateGas: {
    claimDisable(
      claimContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimHas(
      claimContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    join(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onClaimConfirmed(
      ruleId: PromiseOrValue<BigNumberish>,
      targetContract: PromiseOrValue<string>,
      targetTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportEvent(
      ruleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      detailsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimDisable(
      claimContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimHas(
      claimContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    join(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onClaimConfirmed(
      ruleId: PromiseOrValue<BigNumberish>,
      targetContract: PromiseOrValue<string>,
      targetTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportEvent(
      ruleId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      detailsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
