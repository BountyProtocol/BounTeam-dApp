/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ISoulInterface extends utils.Interface {
  functions: {
    "accountURI(address)": FunctionFragment;
    "announcement(uint256,string,string)": FunctionFragment;
    "handleFind(string)": FunctionFragment;
    "handleGet(uint256)": FunctionFragment;
    "handleSet(uint256,string)": FunctionFragment;
    "hasTokenControl(uint256)": FunctionFragment;
    "hasTokenControlAccount(uint256,address)": FunctionFragment;
    "mint(string)": FunctionFragment;
    "mintFor(address,string)": FunctionFragment;
    "opinionAboutSoul(uint256,string,int256)": FunctionFragment;
    "opinionAboutToken(address,uint256,string,int256)": FunctionFragment;
    "tokenByAddress(address)": FunctionFragment;
    "tokenOwnerAdd(address,uint256)": FunctionFragment;
    "tokenOwnerRemove(address,uint256)": FunctionFragment;
    "update(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountURI"
      | "announcement"
      | "handleFind"
      | "handleGet"
      | "handleSet"
      | "hasTokenControl"
      | "hasTokenControlAccount"
      | "mint"
      | "mintFor"
      | "opinionAboutSoul"
      | "opinionAboutToken"
      | "tokenByAddress"
      | "tokenOwnerAdd"
      | "tokenOwnerRemove"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "announcement",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFind",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "handleGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "handleSet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTokenControl",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasTokenControlAccount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "opinionAboutSoul",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "opinionAboutToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "accountURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "announcement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleFind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handleGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handleSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasTokenControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasTokenControlAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "opinionAboutSoul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "opinionAboutToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "Announcement(address,uint256,string,string)": EventFragment;
    "ReputationChange(uint256,string,bool,uint256)": EventFragment;
    "SoulHandle(uint256,string)": EventFragment;
    "SoulType(uint256,string)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Announcement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReputationChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoulHandle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoulType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface AnnouncementEventObject {
  account: string;
  tokenId: BigNumber;
  uri: string;
  context: string;
}
export type AnnouncementEvent = TypedEvent<
  [string, BigNumber, string, string],
  AnnouncementEventObject
>;

export type AnnouncementEventFilter = TypedEventFilter<AnnouncementEvent>;

export interface ReputationChangeEventObject {
  id: BigNumber;
  domain: string;
  rating: boolean;
  score: BigNumber;
}
export type ReputationChangeEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  ReputationChangeEventObject
>;

export type ReputationChangeEventFilter =
  TypedEventFilter<ReputationChangeEvent>;

export interface SoulHandleEventObject {
  tokenId: BigNumber;
  handle: string;
}
export type SoulHandleEvent = TypedEvent<
  [BigNumber, string],
  SoulHandleEventObject
>;

export type SoulHandleEventFilter = TypedEventFilter<SoulHandleEvent>;

export interface SoulTypeEventObject {
  tokenId: BigNumber;
  soulType: string;
}
export type SoulTypeEvent = TypedEvent<
  [BigNumber, string],
  SoulTypeEventObject
>;

export type SoulTypeEventFilter = TypedEventFilter<SoulTypeEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface ISoul extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISoulInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountURI(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    announcement(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      context: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleFind(
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    handleGet(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    handleSet(
      tokenId: PromiseOrValue<BigNumberish>,
      handle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasTokenControl(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasTokenControlAccount(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintFor(
      to: PromiseOrValue<string>,
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    opinionAboutSoul(
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    opinionAboutToken(
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenByAddress(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOwnerAdd(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenOwnerRemove(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accountURI(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  announcement(
    tokenId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    context: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleFind(
    handle: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  handleGet(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  handleSet(
    tokenId: PromiseOrValue<BigNumberish>,
    handle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasTokenControl(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasTokenControlAccount(
    tokenId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintFor(
    to: PromiseOrValue<string>,
    tokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  opinionAboutSoul(
    tokenId: PromiseOrValue<BigNumberish>,
    domain: PromiseOrValue<string>,
    score: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  opinionAboutToken(
    contractAddr: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    domain: PromiseOrValue<string>,
    score: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenByAddress(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOwnerAdd(
    owner: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenOwnerRemove(
    owner: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    tokenId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountURI(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    announcement(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      context: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    handleFind(
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleGet(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    handleSet(
      tokenId: PromiseOrValue<BigNumberish>,
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasTokenControl(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasTokenControlAccount(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintFor(
      to: PromiseOrValue<string>,
      tokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    opinionAboutSoul(
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    opinionAboutToken(
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenByAddress(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwnerAdd(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOwnerRemove(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Announcement(address,uint256,string,string)"(
      account?: PromiseOrValue<string> | null,
      tokenId?: null,
      uri?: null,
      context?: null
    ): AnnouncementEventFilter;
    Announcement(
      account?: PromiseOrValue<string> | null,
      tokenId?: null,
      uri?: null,
      context?: null
    ): AnnouncementEventFilter;

    "ReputationChange(uint256,string,bool,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      domain?: null,
      rating?: null,
      score?: null
    ): ReputationChangeEventFilter;
    ReputationChange(
      id?: PromiseOrValue<BigNumberish> | null,
      domain?: null,
      rating?: null,
      score?: null
    ): ReputationChangeEventFilter;

    "SoulHandle(uint256,string)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      handle?: null
    ): SoulHandleEventFilter;
    SoulHandle(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      handle?: null
    ): SoulHandleEventFilter;

    "SoulType(uint256,string)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      soulType?: null
    ): SoulTypeEventFilter;
    SoulType(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      soulType?: null
    ): SoulTypeEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
  };

  estimateGas: {
    accountURI(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    announcement(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      context: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleFind(
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleGet(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleSet(
      tokenId: PromiseOrValue<BigNumberish>,
      handle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasTokenControl(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasTokenControlAccount(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintFor(
      to: PromiseOrValue<string>,
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    opinionAboutSoul(
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    opinionAboutToken(
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenByAddress(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwnerAdd(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenOwnerRemove(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountURI(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    announcement(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      context: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleFind(
      handle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleGet(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleSet(
      tokenId: PromiseOrValue<BigNumberish>,
      handle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasTokenControl(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasTokenControlAccount(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintFor(
      to: PromiseOrValue<string>,
      tokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    opinionAboutSoul(
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    opinionAboutToken(
      contractAddr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      domain: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenByAddress(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOwnerAdd(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenOwnerRemove(
      owner: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
