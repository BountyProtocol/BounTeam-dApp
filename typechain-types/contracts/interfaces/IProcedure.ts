/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IProcedureInterface extends utils.Interface {
  functions: {
    "initialize(string)": FunctionFragment;
    "post(string,uint256,string)": FunctionFragment;
    "setParentCTX(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "initialize" | "post" | "setParentCTX"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setParentCTX",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setParentCTX",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(string,address)": EventFragment;
    "Executed(address)": EventFragment;
    "Stage(uint8)": EventFragment;
    "Verdict(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Verdict"): EventFragment;
}

export interface CancelledEventObject {
  uri: string;
  account: string;
}
export type CancelledEvent = TypedEvent<[string, string], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ExecutedEventObject {
  account: string;
}
export type ExecutedEvent = TypedEvent<[string], ExecutedEventObject>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface StageEventObject {
  stage: number;
}
export type StageEvent = TypedEvent<[number], StageEventObject>;

export type StageEventFilter = TypedEventFilter<StageEvent>;

export interface VerdictEventObject {
  uri: string;
  account: string;
}
export type VerdictEvent = TypedEvent<[string, string], VerdictEventObject>;

export type VerdictEventFilter = TypedEventFilter<VerdictEvent>;

export interface IProcedure extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IProcedureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParentCTX(
      container: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  initialize(
    name_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  post(
    entRole: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParentCTX(
    container: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialize(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setParentCTX(
      container: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Cancelled(string,address)"(
      uri?: null,
      account?: null
    ): CancelledEventFilter;
    Cancelled(uri?: null, account?: null): CancelledEventFilter;

    "Executed(address)"(account?: null): ExecutedEventFilter;
    Executed(account?: null): ExecutedEventFilter;

    "Stage(uint8)"(stage?: null): StageEventFilter;
    Stage(stage?: null): StageEventFilter;

    "Verdict(string,address)"(uri?: null, account?: null): VerdictEventFilter;
    Verdict(uri?: null, account?: null): VerdictEventFilter;
  };

  estimateGas: {
    initialize(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParentCTX(
      container: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    post(
      entRole: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParentCTX(
      container: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
