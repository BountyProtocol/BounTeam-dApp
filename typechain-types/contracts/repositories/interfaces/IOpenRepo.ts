/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IOpenRepoInterface extends utils.Interface {
  functions: {
    "addressAdd(string,address)": FunctionFragment;
    "addressGet(string)": FunctionFragment;
    "addressGetAll(string)": FunctionFragment;
    "addressGetAllOf(address,string)": FunctionFragment;
    "addressGetIndex(string,uint256)": FunctionFragment;
    "addressGetIndexOf(address,string,uint256)": FunctionFragment;
    "addressGetOf(address,string)": FunctionFragment;
    "addressHas(string,address)": FunctionFragment;
    "addressHasOf(address,string,address)": FunctionFragment;
    "addressRemove(string,address)": FunctionFragment;
    "addressSet(string,address)": FunctionFragment;
    "boolAdd(string,bool)": FunctionFragment;
    "boolGet(string)": FunctionFragment;
    "boolGetIndex(string,uint256)": FunctionFragment;
    "boolGetIndexOf(address,string,uint256)": FunctionFragment;
    "boolGetOf(address,string)": FunctionFragment;
    "boolRemove(string,bool)": FunctionFragment;
    "boolSet(string,bool)": FunctionFragment;
    "stringAdd(string,string)": FunctionFragment;
    "stringGet(string)": FunctionFragment;
    "stringGetIndex(string,uint256)": FunctionFragment;
    "stringGetIndexOf(address,string,uint256)": FunctionFragment;
    "stringGetOf(address,string)": FunctionFragment;
    "stringRemove(string,string)": FunctionFragment;
    "stringSet(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressAdd"
      | "addressGet"
      | "addressGetAll"
      | "addressGetAllOf"
      | "addressGetIndex"
      | "addressGetIndexOf"
      | "addressGetOf"
      | "addressHas"
      | "addressHasOf"
      | "addressRemove"
      | "addressSet"
      | "boolAdd"
      | "boolGet"
      | "boolGetIndex"
      | "boolGetIndexOf"
      | "boolGetOf"
      | "boolRemove"
      | "boolSet"
      | "stringAdd"
      | "stringGet"
      | "stringGetIndex"
      | "stringGetIndexOf"
      | "stringGetOf"
      | "stringRemove"
      | "stringSet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetAllOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetIndexOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressHas",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressHasOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressSet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetIndexOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolSet",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetIndexOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringSet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addressAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addressGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressGetAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetAllOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressHasOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boolGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boolGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boolGetOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolRemove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stringAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stringGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stringSet", data: BytesLike): Result;

  events: {
    "AddressAdd(address,string,address)": EventFragment;
    "AddressRemoved(address,string,address)": EventFragment;
    "AddressSet(address,string,address)": EventFragment;
    "BoolAdd(address,string,bool)": EventFragment;
    "BoolRemoved(address,string,bool)": EventFragment;
    "BoolSet(address,string,bool)": EventFragment;
    "StringAdd(address,string,string)": EventFragment;
    "StringRemoved(address,string,string)": EventFragment;
    "StringSet(address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringSet"): EventFragment;
}

export interface AddressAddEventObject {
  originAddress: string;
  key: string;
  destinationAddress: string;
}
export type AddressAddEvent = TypedEvent<
  [string, string, string],
  AddressAddEventObject
>;

export type AddressAddEventFilter = TypedEventFilter<AddressAddEvent>;

export interface AddressRemovedEventObject {
  originAddress: string;
  key: string;
  destinationAddress: string;
}
export type AddressRemovedEvent = TypedEvent<
  [string, string, string],
  AddressRemovedEventObject
>;

export type AddressRemovedEventFilter = TypedEventFilter<AddressRemovedEvent>;

export interface AddressSetEventObject {
  originAddress: string;
  key: string;
  destinationAddress: string;
}
export type AddressSetEvent = TypedEvent<
  [string, string, string],
  AddressSetEventObject
>;

export type AddressSetEventFilter = TypedEventFilter<AddressSetEvent>;

export interface BoolAddEventObject {
  originContract: string;
  key: string;
  value: boolean;
}
export type BoolAddEvent = TypedEvent<
  [string, string, boolean],
  BoolAddEventObject
>;

export type BoolAddEventFilter = TypedEventFilter<BoolAddEvent>;

export interface BoolRemovedEventObject {
  originContract: string;
  key: string;
  value: boolean;
}
export type BoolRemovedEvent = TypedEvent<
  [string, string, boolean],
  BoolRemovedEventObject
>;

export type BoolRemovedEventFilter = TypedEventFilter<BoolRemovedEvent>;

export interface BoolSetEventObject {
  originContract: string;
  key: string;
  value: boolean;
}
export type BoolSetEvent = TypedEvent<
  [string, string, boolean],
  BoolSetEventObject
>;

export type BoolSetEventFilter = TypedEventFilter<BoolSetEvent>;

export interface StringAddEventObject {
  originAddress: string;
  key: string;
  value: string;
}
export type StringAddEvent = TypedEvent<
  [string, string, string],
  StringAddEventObject
>;

export type StringAddEventFilter = TypedEventFilter<StringAddEvent>;

export interface StringRemovedEventObject {
  originAddress: string;
  key: string;
  value: string;
}
export type StringRemovedEvent = TypedEvent<
  [string, string, string],
  StringRemovedEventObject
>;

export type StringRemovedEventFilter = TypedEventFilter<StringRemovedEvent>;

export interface StringSetEventObject {
  originAddress: string;
  key: string;
  value: string;
}
export type StringSetEvent = TypedEvent<
  [string, string, string],
  StringSetEventObject
>;

export type StringSetEventFilter = TypedEventFilter<StringSetEvent>;

export interface IOpenRepo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOpenRepoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    addressGetAllOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    addressGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressHas(
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addressHasOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addressRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    boolAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    boolGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    boolSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetIndexOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addressAdd(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  addressGetAll(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  addressGetAllOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  addressGetIndex(
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  addressGetIndexOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  addressGetOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  addressHas(
    key: PromiseOrValue<string>,
    targetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addressHasOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    targetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addressRemove(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  boolAdd(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  boolGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolGetIndex(
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolGetIndexOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolGetOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolRemove(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  boolSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringAdd(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetIndex(
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetIndexOf(
    originAddress: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetOf(
    originAddress: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringRemove(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    addressGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    addressGetAllOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    addressGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    addressGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    addressGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    addressHas(
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addressHasOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addressRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    boolAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    boolGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    boolSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetIndexOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressAdd(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressAddEventFilter;
    AddressAdd(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressAddEventFilter;

    "AddressRemoved(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressRemovedEventFilter;
    AddressRemoved(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressRemovedEventFilter;

    "AddressSet(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressSetEventFilter;
    AddressSet(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressSetEventFilter;

    "BoolAdd(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolAddEventFilter;
    BoolAdd(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolAddEventFilter;

    "BoolRemoved(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolRemovedEventFilter;
    BoolRemoved(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolRemovedEventFilter;

    "BoolSet(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolSetEventFilter;
    BoolSet(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolSetEventFilter;

    "StringAdd(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringAddEventFilter;
    StringAdd(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringAddEventFilter;

    "StringRemoved(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringRemovedEventFilter;
    StringRemoved(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringRemovedEventFilter;

    "StringSet(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringSetEventFilter;
    StringSet(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringSetEventFilter;
  };

  estimateGas: {
    addressAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetAllOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressHas(
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressHasOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    boolAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    boolGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    boolSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetIndexOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetAllOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressHas(
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressHasOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    boolAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    boolGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    boolSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetIndexOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
