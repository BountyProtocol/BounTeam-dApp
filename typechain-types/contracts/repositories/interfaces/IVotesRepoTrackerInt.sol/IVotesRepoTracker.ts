/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IVotesRepoTrackerInterface extends utils.Interface {
  functions: {
    "delegatesToken(uint256)": FunctionFragment;
    "getPastVotesForToken(uint256,uint256)": FunctionFragment;
    "getTargetContract()": FunctionFragment;
    "getVotesForToken(uint256)": FunctionFragment;
    "transferVotingUnits(uint256,uint256,int256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "delegatesToken"
      | "getPastVotesForToken"
      | "getTargetContract"
      | "getVotesForToken"
      | "transferVotingUnits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "delegatesToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotesForToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesForToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVotingUnits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "delegatesToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotesForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotesForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVotingUnits",
    data: BytesLike
  ): Result;

  events: {
    "DelegateChangedToken(uint256,uint256,uint256)": EventFragment;
    "DelegateVotesChangedToken(uint256,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateChangedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChangedToken"): EventFragment;
}

export interface DelegateChangedTokenEventObject {
  delegator: BigNumber;
  fromDelegate: BigNumber;
  toDelegate: BigNumber;
}
export type DelegateChangedTokenEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  DelegateChangedTokenEventObject
>;

export type DelegateChangedTokenEventFilter =
  TypedEventFilter<DelegateChangedTokenEvent>;

export interface DelegateVotesChangedTokenEventObject {
  delegate: BigNumber;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedTokenEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  DelegateVotesChangedTokenEventObject
>;

export type DelegateVotesChangedTokenEventFilter =
  TypedEventFilter<DelegateVotesChangedTokenEvent>;

export interface IVotesRepoTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVotesRepoTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delegatesToken(
      accountToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastVotesForToken(
      account: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTargetContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVotesForToken(
      account: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferVotingUnits(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  delegatesToken(
    accountToken: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastVotesForToken(
    account: PromiseOrValue<BigNumberish>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTargetContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVotesForToken(
    account: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferVotingUnits(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    delegatesToken(
      accountToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotesForToken(
      account: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetContract(overrides?: CallOverrides): Promise<string>;

    getVotesForToken(
      account: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferVotingUnits(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DelegateChangedToken(uint256,uint256,uint256)"(
      delegator?: PromiseOrValue<BigNumberish> | null,
      fromDelegate?: PromiseOrValue<BigNumberish> | null,
      toDelegate?: PromiseOrValue<BigNumberish> | null
    ): DelegateChangedTokenEventFilter;
    DelegateChangedToken(
      delegator?: PromiseOrValue<BigNumberish> | null,
      fromDelegate?: PromiseOrValue<BigNumberish> | null,
      toDelegate?: PromiseOrValue<BigNumberish> | null
    ): DelegateChangedTokenEventFilter;

    "DelegateVotesChangedToken(uint256,int256,int256)"(
      delegate?: PromiseOrValue<BigNumberish> | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedTokenEventFilter;
    DelegateVotesChangedToken(
      delegate?: PromiseOrValue<BigNumberish> | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedTokenEventFilter;
  };

  estimateGas: {
    delegatesToken(
      accountToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotesForToken(
      account: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVotesForToken(
      account: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferVotingUnits(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegatesToken(
      accountToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastVotesForToken(
      account: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVotesForToken(
      account: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferVotingUnits(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
