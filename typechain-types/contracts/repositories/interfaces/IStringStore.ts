/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IStringStoreInterface extends utils.Interface {
  functions: {
    "stringAdd(string,string)": FunctionFragment;
    "stringGet(string)": FunctionFragment;
    "stringGetIndex(string,uint256)": FunctionFragment;
    "stringGetIndexOf(address,string,uint256)": FunctionFragment;
    "stringGetOf(address,string)": FunctionFragment;
    "stringRemove(string,string)": FunctionFragment;
    "stringSet(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "stringAdd"
      | "stringGet"
      | "stringGetIndex"
      | "stringGetIndexOf"
      | "stringGetOf"
      | "stringRemove"
      | "stringSet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "stringAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetIndexOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringSet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "stringAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stringGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stringSet", data: BytesLike): Result;

  events: {};
}

export interface IStringStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStringStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetIndexOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  stringAdd(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetIndex(
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetIndexOf(
    originAddress: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetOf(
    originAddress: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringRemove(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetIndexOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetIndexOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetIndexOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetOf(
      originAddress: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
