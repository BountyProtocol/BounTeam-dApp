/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OpenRepoUpgradableInterface extends utils.Interface {
  functions: {
    "addressAdd(string,address)": FunctionFragment;
    "addressGet(string)": FunctionFragment;
    "addressGetAll(string)": FunctionFragment;
    "addressGetAllOf(address,string)": FunctionFragment;
    "addressGetIndex(string,uint256)": FunctionFragment;
    "addressGetIndexOf(address,string,uint256)": FunctionFragment;
    "addressGetOf(address,string)": FunctionFragment;
    "addressHas(string,address)": FunctionFragment;
    "addressHasOf(address,string,address)": FunctionFragment;
    "addressRemove(string,address)": FunctionFragment;
    "addressSet(string,address)": FunctionFragment;
    "boolAdd(string,bool)": FunctionFragment;
    "boolGet(string)": FunctionFragment;
    "boolGetAll(string)": FunctionFragment;
    "boolGetIndex(string,uint256)": FunctionFragment;
    "boolGetIndexOf(address,string,uint256)": FunctionFragment;
    "boolGetOf(address,string)": FunctionFragment;
    "boolRemove(string,bool)": FunctionFragment;
    "boolSet(string,bool)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "initialize()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stringAdd(string,string)": FunctionFragment;
    "stringGet(string)": FunctionFragment;
    "stringGetAll(string)": FunctionFragment;
    "stringGetIndex(string,uint256)": FunctionFragment;
    "stringGetIndexOf(address,string,uint256)": FunctionFragment;
    "stringGetOf(address,string)": FunctionFragment;
    "stringRemove(string,string)": FunctionFragment;
    "stringSet(string,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uintAdd(string,uint256)": FunctionFragment;
    "uintGet(string)": FunctionFragment;
    "uintGetAll(string)": FunctionFragment;
    "uintGetIndex(string,uint256)": FunctionFragment;
    "uintGetIndexOf(address,string,uint256)": FunctionFragment;
    "uintGetOf(address,string)": FunctionFragment;
    "uintRemove(string,uint256)": FunctionFragment;
    "uintSet(string,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressAdd"
      | "addressGet"
      | "addressGetAll"
      | "addressGetAllOf"
      | "addressGetIndex"
      | "addressGetIndexOf"
      | "addressGetOf"
      | "addressHas"
      | "addressHasOf"
      | "addressRemove"
      | "addressSet"
      | "boolAdd"
      | "boolGet"
      | "boolGetAll"
      | "boolGetIndex"
      | "boolGetIndexOf"
      | "boolGetOf"
      | "boolRemove"
      | "boolSet"
      | "contractURI"
      | "initialize"
      | "name"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "stringAdd"
      | "stringGet"
      | "stringGetAll"
      | "stringGetIndex"
      | "stringGetIndexOf"
      | "stringGetOf"
      | "stringRemove"
      | "stringSet"
      | "supportsInterface"
      | "symbol"
      | "transferOwnership"
      | "uintAdd"
      | "uintGet"
      | "uintGetAll"
      | "uintGetIndex"
      | "uintGetIndexOf"
      | "uintGetOf"
      | "uintRemove"
      | "uintSet"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetAllOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetIndexOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressGetOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressHas",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressHasOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addressRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressSet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetIndexOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "boolGetOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "boolSet",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stringAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetIndexOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stringGetOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stringSet",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uintAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uintGet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uintGetAll",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uintGetIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uintGetIndexOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uintGetOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uintRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uintSet",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "addressAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addressGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressGetAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetAllOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressGetOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressHasOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addressSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolGetAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boolGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boolGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boolGetOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolRemove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boolSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stringAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stringGet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringGetAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringGetOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stringSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uintAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uintGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uintGetAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uintGetIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uintGetIndexOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uintGetOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uintRemove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uintSet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AddressAdd(address,string,address)": EventFragment;
    "AddressRemoved(address,string,address)": EventFragment;
    "AddressSet(address,string,address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BoolAdd(address,string,bool)": EventFragment;
    "BoolRemoved(address,string,bool)": EventFragment;
    "BoolSet(address,string,bool)": EventFragment;
    "ContractURI(string)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StringAdd(address,string,string)": EventFragment;
    "StringRemoved(address,string,string)": EventFragment;
    "StringSet(address,string,string)": EventFragment;
    "UintAdd(address,string,uint256)": EventFragment;
    "UintRemoved(address,string,uint256)": EventFragment;
    "UintSet(address,string,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UintAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UintRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UintSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AddressAddEventObject {
  originAddress: string;
  key: string;
  destinationAddress: string;
}
export type AddressAddEvent = TypedEvent<
  [string, string, string],
  AddressAddEventObject
>;

export type AddressAddEventFilter = TypedEventFilter<AddressAddEvent>;

export interface AddressRemovedEventObject {
  originAddress: string;
  key: string;
  destinationAddress: string;
}
export type AddressRemovedEvent = TypedEvent<
  [string, string, string],
  AddressRemovedEventObject
>;

export type AddressRemovedEventFilter = TypedEventFilter<AddressRemovedEvent>;

export interface AddressSetEventObject {
  originAddress: string;
  key: string;
  destinationAddress: string;
}
export type AddressSetEvent = TypedEvent<
  [string, string, string],
  AddressSetEventObject
>;

export type AddressSetEventFilter = TypedEventFilter<AddressSetEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BoolAddEventObject {
  originContract: string;
  key: string;
  value: boolean;
}
export type BoolAddEvent = TypedEvent<
  [string, string, boolean],
  BoolAddEventObject
>;

export type BoolAddEventFilter = TypedEventFilter<BoolAddEvent>;

export interface BoolRemovedEventObject {
  originContract: string;
  key: string;
  value: boolean;
}
export type BoolRemovedEvent = TypedEvent<
  [string, string, boolean],
  BoolRemovedEventObject
>;

export type BoolRemovedEventFilter = TypedEventFilter<BoolRemovedEvent>;

export interface BoolSetEventObject {
  originContract: string;
  key: string;
  value: boolean;
}
export type BoolSetEvent = TypedEvent<
  [string, string, boolean],
  BoolSetEventObject
>;

export type BoolSetEventFilter = TypedEventFilter<BoolSetEvent>;

export interface ContractURIEventObject {
  arg0: string;
}
export type ContractURIEvent = TypedEvent<[string], ContractURIEventObject>;

export type ContractURIEventFilter = TypedEventFilter<ContractURIEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StringAddEventObject {
  originAddress: string;
  key: string;
  value: string;
}
export type StringAddEvent = TypedEvent<
  [string, string, string],
  StringAddEventObject
>;

export type StringAddEventFilter = TypedEventFilter<StringAddEvent>;

export interface StringRemovedEventObject {
  originAddress: string;
  key: string;
  value: string;
}
export type StringRemovedEvent = TypedEvent<
  [string, string, string],
  StringRemovedEventObject
>;

export type StringRemovedEventFilter = TypedEventFilter<StringRemovedEvent>;

export interface StringSetEventObject {
  originAddress: string;
  key: string;
  value: string;
}
export type StringSetEvent = TypedEvent<
  [string, string, string],
  StringSetEventObject
>;

export type StringSetEventFilter = TypedEventFilter<StringSetEvent>;

export interface UintAddEventObject {
  originContract: string;
  key: string;
  value: BigNumber;
}
export type UintAddEvent = TypedEvent<
  [string, string, BigNumber],
  UintAddEventObject
>;

export type UintAddEventFilter = TypedEventFilter<UintAddEvent>;

export interface UintRemovedEventObject {
  originContract: string;
  key: string;
  value: BigNumber;
}
export type UintRemovedEvent = TypedEvent<
  [string, string, BigNumber],
  UintRemovedEventObject
>;

export type UintRemovedEventFilter = TypedEventFilter<UintRemovedEvent>;

export interface UintSetEventObject {
  originContract: string;
  key: string;
  value: BigNumber;
}
export type UintSetEvent = TypedEvent<
  [string, string, BigNumber],
  UintSetEventObject
>;

export type UintSetEventFilter = TypedEventFilter<UintSetEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface OpenRepoUpgradable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpenRepoUpgradableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    addressGetAllOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    addressGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressHas(
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addressHasOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addressRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    boolAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    boolGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    boolGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    boolRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    boolSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringGetOf(
      ownerAddr: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uintAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uintGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uintGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    uintGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uintGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uintGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uintRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uintSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addressAdd(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  addressGetAll(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  addressGetAllOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  addressGetIndex(
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  addressGetIndexOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  addressGetOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  addressHas(
    key: PromiseOrValue<string>,
    targetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addressHasOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    targetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addressRemove(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  boolAdd(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  boolGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolGetAll(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  boolGetIndex(
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolGetIndexOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolGetOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  boolRemove(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  boolSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringAdd(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetAll(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  stringGetIndex(
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetIndexOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringGetOf(
    ownerAddr: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  stringRemove(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stringSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uintAdd(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uintGet(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uintGetAll(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  uintGetIndex(
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uintGetIndexOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uintGetOf(
    originContract: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uintRemove(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uintSet(
    key: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    addressGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    addressGetAllOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    addressGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    addressGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    addressGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    addressHas(
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addressHasOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addressRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    boolAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    boolGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    boolGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    boolRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    boolSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringGetOf(
      ownerAddr: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uintAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uintGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    uintGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uintSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressAdd(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressAddEventFilter;
    AddressAdd(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressAddEventFilter;

    "AddressRemoved(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressRemovedEventFilter;
    AddressRemoved(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressRemovedEventFilter;

    "AddressSet(address,string,address)"(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressSetEventFilter;
    AddressSet(
      originAddress?: null,
      key?: null,
      destinationAddress?: null
    ): AddressSetEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "BoolAdd(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolAddEventFilter;
    BoolAdd(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolAddEventFilter;

    "BoolRemoved(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolRemovedEventFilter;
    BoolRemoved(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolRemovedEventFilter;

    "BoolSet(address,string,bool)"(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolSetEventFilter;
    BoolSet(
      originContract?: null,
      key?: null,
      value?: null
    ): BoolSetEventFilter;

    "ContractURI(string)"(arg0?: null): ContractURIEventFilter;
    ContractURI(arg0?: null): ContractURIEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StringAdd(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringAddEventFilter;
    StringAdd(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringAddEventFilter;

    "StringRemoved(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringRemovedEventFilter;
    StringRemoved(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringRemovedEventFilter;

    "StringSet(address,string,string)"(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringSetEventFilter;
    StringSet(
      originAddress?: null,
      key?: null,
      value?: null
    ): StringSetEventFilter;

    "UintAdd(address,string,uint256)"(
      originContract?: null,
      key?: null,
      value?: null
    ): UintAddEventFilter;
    UintAdd(
      originContract?: null,
      key?: null,
      value?: null
    ): UintAddEventFilter;

    "UintRemoved(address,string,uint256)"(
      originContract?: null,
      key?: null,
      value?: null
    ): UintRemovedEventFilter;
    UintRemoved(
      originContract?: null,
      key?: null,
      value?: null
    ): UintRemovedEventFilter;

    "UintSet(address,string,uint256)"(
      originContract?: null,
      key?: null,
      value?: null
    ): UintSetEventFilter;
    UintSet(
      originContract?: null,
      key?: null,
      value?: null
    ): UintSetEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    addressAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetAllOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressHas(
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressHasOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    boolAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    boolGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    boolSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringGetOf(
      ownerAddr: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uintAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uintGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uintSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetAllOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressHas(
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressHasOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    boolAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    boolGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    boolSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringGetOf(
      ownerAddr: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stringSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uintAdd(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uintGet(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uintGetAll(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uintGetIndex(
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uintGetIndexOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uintGetOf(
      originContract: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uintRemove(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uintSet(
      key: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
