/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace DataTypes {
  export type ConfirmationStruct = {
    ruling: PromiseOrValue<string>;
    evidence: PromiseOrValue<boolean>;
    witness: PromiseOrValue<BigNumberish>;
  };

  export type ConfirmationStructOutput = [string, boolean, BigNumber] & {
    ruling: string;
    evidence: boolean;
    witness: BigNumber;
  };

  export type RepChangeStruct = {
    domain: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    disabled: PromiseOrValue<boolean>;
  };

  export type RepChangeStructOutput = [string, BigNumber, boolean] & {
    domain: string;
    value: BigNumber;
    disabled: boolean;
  };

  export type RuleStruct = {
    about: PromiseOrValue<BytesLike>;
    affected: PromiseOrValue<string>;
    negation: PromiseOrValue<boolean>;
    uri: PromiseOrValue<string>;
    disabled: PromiseOrValue<boolean>;
  };

  export type RuleStructOutput = [string, string, boolean, string, boolean] & {
    about: string;
    affected: string;
    negation: boolean;
    uri: string;
    disabled: boolean;
  };
}

export interface IRuleExtInterface extends utils.Interface {
  functions: {
    "confirmationGet(uint256)": FunctionFragment;
    "effectsGet(uint256)": FunctionFragment;
    "ruleAdd((bytes32,string,bool,string,bool),(string,bool,uint256),(string,int256,bool)[])": FunctionFragment;
    "ruleDisable(uint256,bool)": FunctionFragment;
    "ruleGet(uint256)": FunctionFragment;
    "ruleUpdate(uint256,(bytes32,string,bool,string,bool),(string,int256,bool)[])": FunctionFragment;
    "ruleUpdateConfirmation(uint256,(string,bool,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confirmationGet"
      | "effectsGet"
      | "ruleAdd"
      | "ruleDisable"
      | "ruleGet"
      | "ruleUpdate"
      | "ruleUpdateConfirmation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confirmationGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "effectsGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleAdd",
    values: [
      DataTypes.RuleStruct,
      DataTypes.ConfirmationStruct,
      DataTypes.RepChangeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleDisable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleUpdate",
    values: [
      PromiseOrValue<BigNumberish>,
      DataTypes.RuleStruct,
      DataTypes.RepChangeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleUpdateConfirmation",
    values: [PromiseOrValue<BigNumberish>, DataTypes.ConfirmationStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmationGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "effectsGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ruleAdd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ruleDisable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ruleGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ruleUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ruleUpdateConfirmation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRuleExt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRuleExtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmationGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ConfirmationStructOutput]>;

    effectsGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RepChangeStructOutput[]]>;

    ruleAdd(
      rule: DataTypes.RuleStruct,
      confirmation: DataTypes.ConfirmationStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ruleDisable(
      id: PromiseOrValue<BigNumberish>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ruleGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.RuleStructOutput]>;

    ruleUpdate(
      id: PromiseOrValue<BigNumberish>,
      rule: DataTypes.RuleStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ruleUpdateConfirmation(
      id: PromiseOrValue<BigNumberish>,
      confirmation: DataTypes.ConfirmationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  confirmationGet(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.ConfirmationStructOutput>;

  effectsGet(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RepChangeStructOutput[]>;

  ruleAdd(
    rule: DataTypes.RuleStruct,
    confirmation: DataTypes.ConfirmationStruct,
    effects: DataTypes.RepChangeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ruleDisable(
    id: PromiseOrValue<BigNumberish>,
    disabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ruleGet(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.RuleStructOutput>;

  ruleUpdate(
    id: PromiseOrValue<BigNumberish>,
    rule: DataTypes.RuleStruct,
    effects: DataTypes.RepChangeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ruleUpdateConfirmation(
    id: PromiseOrValue<BigNumberish>,
    confirmation: DataTypes.ConfirmationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    confirmationGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.ConfirmationStructOutput>;

    effectsGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RepChangeStructOutput[]>;

    ruleAdd(
      rule: DataTypes.RuleStruct,
      confirmation: DataTypes.ConfirmationStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleDisable(
      id: PromiseOrValue<BigNumberish>,
      disabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    ruleGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.RuleStructOutput>;

    ruleUpdate(
      id: PromiseOrValue<BigNumberish>,
      rule: DataTypes.RuleStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    ruleUpdateConfirmation(
      id: PromiseOrValue<BigNumberish>,
      confirmation: DataTypes.ConfirmationStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    confirmationGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectsGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleAdd(
      rule: DataTypes.RuleStruct,
      confirmation: DataTypes.ConfirmationStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ruleDisable(
      id: PromiseOrValue<BigNumberish>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ruleGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleUpdate(
      id: PromiseOrValue<BigNumberish>,
      rule: DataTypes.RuleStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ruleUpdateConfirmation(
      id: PromiseOrValue<BigNumberish>,
      confirmation: DataTypes.ConfirmationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmationGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectsGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleAdd(
      rule: DataTypes.RuleStruct,
      confirmation: DataTypes.ConfirmationStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ruleDisable(
      id: PromiseOrValue<BigNumberish>,
      disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ruleGet(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleUpdate(
      id: PromiseOrValue<BigNumberish>,
      rule: DataTypes.RuleStruct,
      effects: DataTypes.RepChangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ruleUpdateConfirmation(
      id: PromiseOrValue<BigNumberish>,
      confirmation: DataTypes.ConfirmationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
