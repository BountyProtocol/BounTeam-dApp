/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OpinionsInterface extends utils.Interface {
  contractName: "Opinions";
  functions: {
    "getOpinion(uint256,address,uint256,string)": FunctionFragment;
    "getOpinionMine(address,uint256,string)": FunctionFragment;
    "getOpinionOnSoul(uint256,string)": FunctionFragment;
    "getPastRepForDomain(uint256,address,uint256,string,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getOpinion",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpinionMine",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpinionOnSoul",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastRepForDomain",
    values: [BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getOpinion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOpinionMine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpinionOnSoul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastRepForDomain",
    data: BytesLike
  ): Result;

  events: {
    "OpinionChange(uint256,address,uint256,string,int256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OpinionChange"): EventFragment;
}

export type OpinionChangeEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber],
  {
    sbt: BigNumber;
    contractAddr: string;
    tokenId: BigNumber;
    domain: string;
    oldValue: BigNumber;
    newValue: BigNumber;
  }
>;

export type OpinionChangeEventFilter = TypedEventFilter<OpinionChangeEvent>;

export interface Opinions extends BaseContract {
  contractName: "Opinions";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpinionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOpinion(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpinionMine(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpinionOnSoul(
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastRepForDomain(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getOpinion(
    sbt: BigNumberish,
    contractAddr: string,
    tokenId: BigNumberish,
    domain: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpinionMine(
    contractAddr: string,
    tokenId: BigNumberish,
    domain: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpinionOnSoul(
    tokenId: BigNumberish,
    domain: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastRepForDomain(
    sbt: BigNumberish,
    contractAddr: string,
    tokenId: BigNumberish,
    domain: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getOpinion(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionMine(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionOnSoul(
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastRepForDomain(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OpinionChange(uint256,address,uint256,string,int256,int256)"(
      sbt?: null,
      contractAddr?: string | null,
      tokenId?: BigNumberish | null,
      domain?: null,
      oldValue?: null,
      newValue?: null
    ): OpinionChangeEventFilter;
    OpinionChange(
      sbt?: null,
      contractAddr?: string | null,
      tokenId?: BigNumberish | null,
      domain?: null,
      oldValue?: null,
      newValue?: null
    ): OpinionChangeEventFilter;
  };

  estimateGas: {
    getOpinion(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionMine(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpinionOnSoul(
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastRepForDomain(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOpinion(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpinionMine(
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpinionOnSoul(
      tokenId: BigNumberish,
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastRepForDomain(
      sbt: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      domain: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
