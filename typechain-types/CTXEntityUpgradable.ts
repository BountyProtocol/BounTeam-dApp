/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CTXEntityUpgradableInterface extends utils.Interface {
  contractName: "CTXEntityUpgradable";
  functions: {
    "GUIDHas(address,bytes32)": FunctionFragment;
    "GUIDHasByToken(uint256,bytes32)": FunctionFragment;
    "GUIDURI(bytes32)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "balanceOfToken(uint256,uint256)": FunctionFragment;
    "confGet(string)": FunctionFragment;
    "confSet(string,string)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getCurrentSBT()": FunctionFragment;
    "getExtTokenId(address)": FunctionFragment;
    "getHub()": FunctionFragment;
    "getRepoAddr()": FunctionFragment;
    "getTargetContract()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "nominate(uint256,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roleAssign(address,string)": FunctionFragment;
    "roleAssignToToken(uint256,string)": FunctionFragment;
    "roleChange(address,string,string)": FunctionFragment;
    "roleCreate(string)": FunctionFragment;
    "roleExist(string)": FunctionFragment;
    "roleHas(address,string)": FunctionFragment;
    "roleHasByToken(uint256,string)": FunctionFragment;
    "roleRemove(address,string)": FunctionFragment;
    "roleRemoveFromToken(uint256,string)": FunctionFragment;
    "roleToId(string)": FunctionFragment;
    "roleURI(string)": FunctionFragment;
    "rolesHas(address,string[])": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "setHub(address)": FunctionFragment;
    "setRoleURI(string,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniqueMembers(uint256)": FunctionFragment;
    "uniqueMembersCount(uint256)": FunctionFragment;
    "uniqueRoleMembers(string)": FunctionFragment;
    "uniqueRoleMembersCount(string)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "GUIDHas",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GUIDHasByToken",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "GUIDURI", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "confGet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "confSet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSBT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExtTokenId",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getHub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRepoAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleAssign",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleAssignToToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleChange",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "roleCreate", values: [string]): string;
  encodeFunctionData(functionFragment: "roleExist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "roleHas",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleHasByToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleRemove",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "roleRemoveFromToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "roleToId", values: [string]): string;
  encodeFunctionData(functionFragment: "roleURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rolesHas",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setHub", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRoleURI",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueMembers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueMembersCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueRoleMembers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueRoleMembersCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "GUIDHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GUIDHasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GUIDURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "confGet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRepoAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nominate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleAssign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleAssignToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleChange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleCreate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleExist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleHasByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleRemove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleRemoveFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleToId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rolesHas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoleURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueMembersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueRoleMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueRoleMembersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "GUIDCreated(uint256,bytes32)": EventFragment;
    "GUIDURIChange(string,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Nominate(address,uint256,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleCreated(uint256,string)": EventFragment;
    "RoleURIChange(string,string)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferBatchByToken(address,uint256,uint256,uint256[],uint256[])": EventFragment;
    "TransferByToken(address,uint256,uint256,uint256,uint256)": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GUIDCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GUIDURIChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Nominate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleURIChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatchByToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferByToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { account: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type GUIDCreatedEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; guid: string }
>;

export type GUIDCreatedEventFilter = TypedEventFilter<GUIDCreatedEvent>;

export type GUIDURIChangeEvent = TypedEvent<
  [string, string],
  { value: string; guid: string }
>;

export type GUIDURIChangeEventFilter = TypedEventFilter<GUIDURIChangeEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type NominateEvent = TypedEvent<
  [string, BigNumber, string],
  { account: string; id: BigNumber; uri: string }
>;

export type NominateEventFilter = TypedEventFilter<NominateEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RoleCreatedEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; role: string }
>;

export type RoleCreatedEventFilter = TypedEventFilter<RoleCreatedEvent>;

export type RoleURIChangeEvent = TypedEvent<
  [string, string],
  { value: string; role: string }
>;

export type RoleURIChangeEventFilter = TypedEventFilter<RoleURIChangeEvent>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export type TransferBatchByTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber[], BigNumber[]],
  {
    operator: string;
    fromOwnerToken: BigNumber;
    toOwnerToken: BigNumber;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferBatchByTokenEventFilter =
  TypedEventFilter<TransferBatchByTokenEvent>;

export type TransferByTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    operator: string;
    fromOwnerToken: BigNumber;
    toOwnerToken: BigNumber;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type TransferByTokenEventFilter = TypedEventFilter<TransferByTokenEvent>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export type URIEvent = TypedEvent<
  [string, BigNumber],
  { value: string; id: BigNumber }
>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface CTXEntityUpgradable extends BaseContract {
  contractName: "CTXEntityUpgradable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CTXEntityUpgradableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GUIDHas(
      account: string,
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    GUIDHasByToken(
      soulToken: BigNumberish,
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    GUIDURI(guid: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    balanceOfToken(
      sbt: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    confGet(key: string, overrides?: CallOverrides): Promise<[string]>;

    confSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getCurrentSBT(overrides?: CallOverrides): Promise<[BigNumber]>;

    getExtTokenId(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHub(overrides?: CallOverrides): Promise<[string]>;

    getRepoAddr(overrides?: CallOverrides): Promise<[string]>;

    getTargetContract(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      sbtAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nominate(
      soulToken: BigNumberish,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleAssign(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleAssignToToken(
      sbt: BigNumberish,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleChange(
      account: string,
      roleOld: string,
      roleNew: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleCreate(
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleExist(role: string, overrides?: CallOverrides): Promise<[boolean]>;

    roleHas(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleHasByToken(
      soulToken: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleRemove(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleRemoveFromToken(
      sbt: BigNumberish,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleToId(role: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    roleURI(role: string, overrides?: CallOverrides): Promise<[string]>;

    rolesHas(
      account: string,
      roles: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      contract_uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHub(
      hubAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoleURI(
      role: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniqueMembers(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    uniqueMembersCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uniqueRoleMembers(
      role: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    uniqueRoleMembersCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uri(token_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  GUIDHas(
    account: string,
    guid: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  GUIDHasByToken(
    soulToken: BigNumberish,
    guid: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  GUIDURI(guid: BytesLike, overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  balanceOfToken(
    sbt: BigNumberish,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  confGet(key: string, overrides?: CallOverrides): Promise<string>;

  confSet(
    key: string,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

  getExtTokenId(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getHub(overrides?: CallOverrides): Promise<string>;

  getRepoAddr(overrides?: CallOverrides): Promise<string>;

  getTargetContract(overrides?: CallOverrides): Promise<string>;

  initialize(
    sbtAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nominate(
    soulToken: BigNumberish,
    uri_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleAssign(
    account: string,
    role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleAssignToToken(
    sbt: BigNumberish,
    role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleChange(
    account: string,
    roleOld: string,
    roleNew: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleCreate(
    role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleExist(role: string, overrides?: CallOverrides): Promise<boolean>;

  roleHas(
    account: string,
    role: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleHasByToken(
    soulToken: BigNumberish,
    role: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleRemove(
    account: string,
    role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleRemoveFromToken(
    sbt: BigNumberish,
    role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleToId(role: string, overrides?: CallOverrides): Promise<BigNumber>;

  roleURI(role: string, overrides?: CallOverrides): Promise<string>;

  rolesHas(
    account: string,
    roles: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    contract_uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHub(
    hubAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoleURI(
    role: string,
    _tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniqueMembers(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  uniqueMembersCount(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uniqueRoleMembers(
    role: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  uniqueRoleMembersCount(
    role: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uri(token_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    GUIDHas(
      account: string,
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    GUIDHasByToken(
      soulToken: BigNumberish,
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    GUIDURI(guid: BytesLike, overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    balanceOfToken(
      sbt: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confGet(key: string, overrides?: CallOverrides): Promise<string>;

    confSet(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

    getExtTokenId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHub(overrides?: CallOverrides): Promise<string>;

    getRepoAddr(overrides?: CallOverrides): Promise<string>;

    getTargetContract(overrides?: CallOverrides): Promise<string>;

    initialize(sbtAddress: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nominate(
      soulToken: BigNumberish,
      uri_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roleAssign(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleAssignToToken(
      sbt: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleChange(
      account: string,
      roleOld: string,
      roleNew: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleCreate(role: string, overrides?: CallOverrides): Promise<void>;

    roleExist(role: string, overrides?: CallOverrides): Promise<boolean>;

    roleHas(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleHasByToken(
      soulToken: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleRemove(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleRemoveFromToken(
      sbt: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleToId(role: string, overrides?: CallOverrides): Promise<BigNumber>;

    roleURI(role: string, overrides?: CallOverrides): Promise<string>;

    rolesHas(
      account: string,
      roles: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      contract_uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHub(hubAddr: string, overrides?: CallOverrides): Promise<void>;

    setRoleURI(
      role: string,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniqueMembers(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    uniqueMembersCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueRoleMembers(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    uniqueRoleMembersCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(token_id: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "GUIDCreated(uint256,bytes32)"(
      id?: BigNumberish | null,
      guid?: null
    ): GUIDCreatedEventFilter;
    GUIDCreated(id?: BigNumberish | null, guid?: null): GUIDCreatedEventFilter;

    "GUIDURIChange(string,bytes32)"(
      value?: null,
      guid?: BytesLike | null
    ): GUIDURIChangeEventFilter;
    GUIDURIChange(
      value?: null,
      guid?: BytesLike | null
    ): GUIDURIChangeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Nominate(address,uint256,string)"(
      account?: null,
      id?: BigNumberish | null,
      uri?: null
    ): NominateEventFilter;
    Nominate(
      account?: null,
      id?: BigNumberish | null,
      uri?: null
    ): NominateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleCreated(uint256,string)"(
      id?: BigNumberish | null,
      role?: null
    ): RoleCreatedEventFilter;
    RoleCreated(id?: BigNumberish | null, role?: null): RoleCreatedEventFilter;

    "RoleURIChange(string,string)"(
      value?: null,
      role?: null
    ): RoleURIChangeEventFilter;
    RoleURIChange(value?: null, role?: null): RoleURIChangeEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferBatchByToken(address,uint256,uint256,uint256[],uint256[])"(
      operator?: string | null,
      fromOwnerToken?: BigNumberish | null,
      toOwnerToken?: BigNumberish | null,
      ids?: null,
      values?: null
    ): TransferBatchByTokenEventFilter;
    TransferBatchByToken(
      operator?: string | null,
      fromOwnerToken?: BigNumberish | null,
      toOwnerToken?: BigNumberish | null,
      ids?: null,
      values?: null
    ): TransferBatchByTokenEventFilter;

    "TransferByToken(address,uint256,uint256,uint256,uint256)"(
      operator?: string | null,
      fromOwnerToken?: BigNumberish | null,
      toOwnerToken?: BigNumberish | null,
      id?: null,
      value?: null
    ): TransferByTokenEventFilter;
    TransferByToken(
      operator?: string | null,
      fromOwnerToken?: BigNumberish | null,
      toOwnerToken?: BigNumberish | null,
      id?: null,
      value?: null
    ): TransferByTokenEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    GUIDHas(
      account: string,
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GUIDHasByToken(
      soulToken: BigNumberish,
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GUIDURI(guid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfToken(
      sbt: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confGet(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    confSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentSBT(overrides?: CallOverrides): Promise<BigNumber>;

    getExtTokenId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHub(overrides?: CallOverrides): Promise<BigNumber>;

    getRepoAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetContract(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      sbtAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominate(
      soulToken: BigNumberish,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleAssign(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleAssignToToken(
      sbt: BigNumberish,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleChange(
      account: string,
      roleOld: string,
      roleNew: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleCreate(
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleExist(role: string, overrides?: CallOverrides): Promise<BigNumber>;

    roleHas(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleHasByToken(
      soulToken: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleRemove(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleRemoveFromToken(
      sbt: BigNumberish,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleToId(role: string, overrides?: CallOverrides): Promise<BigNumber>;

    roleURI(role: string, overrides?: CallOverrides): Promise<BigNumber>;

    rolesHas(
      account: string,
      roles: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      contract_uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHub(
      hubAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoleURI(
      role: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniqueMembers(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueMembersCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueRoleMembers(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniqueRoleMembersCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(token_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GUIDHas(
      account: string,
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GUIDHasByToken(
      soulToken: BigNumberish,
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GUIDURI(
      guid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfToken(
      sbt: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confGet(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confSet(
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentSBT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExtTokenId(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRepoAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      sbtAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominate(
      soulToken: BigNumberish,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleAssign(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleAssignToToken(
      sbt: BigNumberish,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleChange(
      account: string,
      roleOld: string,
      roleNew: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleCreate(
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleExist(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleHas(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleHasByToken(
      soulToken: BigNumberish,
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleRemove(
      account: string,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleRemoveFromToken(
      sbt: BigNumberish,
      role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleToId(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleURI(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rolesHas(
      account: string,
      roles: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      contract_uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHub(
      hubAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoleURI(
      role: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniqueMembers(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueMembersCount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueRoleMembers(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniqueRoleMembersCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      token_id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
